{"version":3,"sources":["components/CeleryIcon.svg","store/types.ts","utils/calculateSalary.ts","components/NumberField.tsx","services/types.ts","components/FlagImage.tsx","components/CurrencySelect.tsx","components/CeleryBox.tsx","store/reducer.ts","components/DrawerMenu.tsx","utils/formatMoney.ts","components/App.tsx","services/fetchCurrencyRates.ts","serviceWorker.js","index.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","InputType","ActionType","createElement","d","_ref","svgRef","title","props","id","x","y","viewBox","style","enableBackground","xmlSpace","ref","ForwardRef","forwardRef","value","type","factor","Number","PerHour","PerDay","PerMonth","PerYear","CurrencyType","NumberFormatCustom","inputRef","onChange","rest","getInputRef","onValueChange","values","thousandSeparator","isNumericString","NumberField","styled","reversed","autoStretch","InputProps","TextField","inputComponent","css","FlagImage","currencyCode","src","toLowerCase","alt","CurrencySelect","Select","map","MenuItem","StyledTextField","StyledSwitch","Switch","checked","CeleryBox","name","index","input","currency","commitment","fullTime","hoursInDay","daysInWeek","vacationDays","holidayDays","ratings","ratingTypes","defaults","baseCurrency","rateFactor","dispatch","salary","calculateSalary","prevSalary","useRef","useEffect","current","usePrevious","defaultValues","Box","padding","Grid","container","spacing","item","sm","xs","placeholder","color","marginBottom","fullWidth","autoFocus","autoComplete","event","SetName","payload","data","endAdornment","InputAdornment","position","FormControlLabel","label","control","size","e","SetCommitmentValue","subID","variant","SetInputValue","startAdornment","SetInputType","SetInputCurrency","entries","ratingID","md","Typography","component","Rating","precision","SetRating","maxWidth","max","start","end","prefix","decimals","duration","separator","Button","onClick","RemoveCelery","Delete","defaultCurrency","USD","newCelery","generateId","defaultState","min","desired","celeries","timestamp","Date","currencies","base","partTime","uuid","persistedStore","window","localStorage","getItem","initialState","JSON","parse","reducer","state","action","console","warn","SetRatingTypeName","undefined","SetStore","SetCurrencies","SetBaseCurrency","rates","previousBaseCurrency","newRates","reduce","acc","val","SetMin","SetDesired","AddCelery","ResetStore","removeItem","reduceStore","setItem","stringify","StyledDrawer","Drawer","DrawerMenu","isOpen","setIsOpen","date","useState","modalIsOpen","setResetModalIsOpen","currenciesIsOpen","setCurrenciesIsOpen","settingsIsOpen","setSettingsIsOpen","ratingsIsOpen","setRatingsIsOpen","anchor","open","ListItem","divider","IconButton","Close","ListItemText","FormControl","InputLabel","button","ListItemIcon","Settings","primary","ExpandLess","ExpandMore","Collapse","in","List","marginLeft","paddingBottom","DeleteForever","Star","AccountBalance","secondary","secondaryTypographyProps","display","align","filter","toFixed","Dialog","DialogTitle","DialogContent","dividers","DialogActions","format","stringValue","Math","floor","log","Layout","div","TopNav","Toolbar","StyledSlider","Slider","StyledBackdrop","Backdrop","theme","zIndex","drawer","process","useReducer","restored","setRestored","drawerIsOpen","setDrawerIsOpen","a","async","fetch","querystring","request","json","error","fetchCurrencyRates","restoreLatestLocalStorage","addEventListener","removeEventListener","salaries","AppBar","Menu","fontWeight","SvgIcon","verticalAlign","Container","height","maxHeight","flexDirection","direction","flex","celery","Grow","Paper","endIcon","AddCircleOutline","marginTop","track","valueLabelFormat","formatMoney","marks","valueLabelDisplay","Snackbar","autoHideDuration","onClose","Alert","severity","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","createMuiTheme","palette","common","black","white","background","paper","default","light","main","dark","contrastText","text","disabled","hint","responsiveFontSizes","ReactDOM","render","CssBaseline","document","getElementById","URL","href","origin","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2f7af517.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", null, React.createElement(\"g\", null, React.createElement(\"path\", {\n  d: \"M511.996,245.866l-65.059-39.121l8.529-22.822l-0.071-0.027c5.41-3.978,10.784-8.645,16.179-14.042l17.831-17.838 l-61.131-22.201l10.7-57.672l-57.637,10.718l-22.214-61.122l-17.831,17.817c-4.269,4.266-10.384,10.383-16.226,18.151 l-19.794,7.368L266.131,0l-22.346,54.127l-58.118-40.495l4.805,37.372c2.188,17.059,4.818,37.564,13.533,56.35L42.408,268.951 c-25.364,25.355-39.493,52.092-41.996,79.47c-3.281,35.896,13.207,72.247,48.96,107.997l6.16,6.176 c32.824,32.821,66.109,49.407,99.087,49.405c2.988-0.001,5.979-0.137,8.961-0.41c27.373-2.504,54.113-16.631,79.477-41.992 l161.594-161.592c18.855,8.758,39.436,11.369,56.557,13.541l37.12,4.718l-40.463-58.056L511.996,245.866z M32.395,351.344 c1.801-19.698,12.808-39.778,32.719-59.682L244.38,112.4l-7.041-10.897c-3.616-5.597-6.272-11.887-8.302-18.509l29.183,20.334 l13.262-32.124l20.013,33.27l16.595-6.177c-0.563,5.883-0.377,12.097,0.85,18.637c-31.588,31.555-168.455,168.281-192.748,192.582 c-28.354,28.346-52.132,72.703-47.215,121.021C42.421,402.95,30.113,376.323,32.395,351.344z M104.359,389.927 c8.357-29.268,26.938-50.101,34.542-57.703c27.356-27.362,197.513-197.342,199.228-199.055l7.051-7.043l-3.182-9.445 c-4.189-12.437-1.721-23.362,5.044-34.161l13.408,36.893l38.416-7.144l-7.133,38.441l35.818,13.008 c-10.452,5.542-22.819,8.119-36.741,2.839l-9.701-3.677l-7.34,7.332c-1.727,1.725-173.004,172.808-200.381,200.185 c-8.242,8.242-35.576,32.797-72.546,37.694C101.446,402.082,102.618,396.024,104.359,389.927z M429.013,282.979 c-6.614-2.029-12.901-4.687-18.494-8.306l-10.899-7.054l-179.271,179.27c-34.696,34.691-68.864,41.999-105.341,21.79 c-5.523-9.315-9.501-18.828-11.898-28.511c47.973-5.68,82.632-36.702,92.988-47.057c24.237-24.238,161.307-161.156,193.577-193.39 c8.361,1.938,16.745,2.383,25.102,1.338l-7.269,19.45l33.272,20.008l-32.121,13.259L429.013,282.979z\"\n})));\n\nvar SvgCeleryIcon = function SvgCeleryIcon(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 512 512\",\n    style: {\n      enableBackground: \"new 0 0 512 512\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgCeleryIcon, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/CeleryIcon.8ccebf47.svg\";\nexport { ForwardRef as ReactComponent };","import { DeepReadonly } from 'ts-essentials';\nimport { CurrencyType } from '../services/types';\n\n// Deeply immutable state\nexport type State = DeepReadonly<{\n    timestamp: number;\n    min: number;\n    desired: number;\n    celeries: {\n        [x: string]: Celery;\n    };\n    currencies: Currencies;\n    defaults: {\n        fullTime: Commitment;\n        partTime: Commitment;\n    };\n    ratingTypes: {\n        [x: string]: string;\n    };\n}>;\n\nexport type Celery = {\n    name: string;\n    input: {\n        value: number;\n        type: InputType;\n        currency: CurrencyType | null;\n    };\n    // TODO: Consolidate with Commitment type\n    commitment: {\n        fullTime: boolean;\n        hoursInDay: number | null;\n        daysInWeek: number | null;\n        vacationDays: number | null;\n        holidayDays: number | null;\n    };\n    ratings: {\n        [x: string]: number;\n    };\n};\n\nexport type Currencies = {\n    base: CurrencyType;\n    date?: string;\n    rates?: {\n        [x: string]: CurrencyType;\n    };\n};\n\nexport type Commitment = {\n    hoursInDay: number;\n    daysInWeek: number;\n    vacationDays: number;\n    holidayDays: number;\n};\n\nexport enum InputType {\n    PerHour = '/hour',\n    PerDay = '/day',\n    PerMonth = '/month',\n    PerYear = '/year'\n}\n\n// TODO: Change to A_B case\nexport enum ActionType {\n    AddCelery = 'addCelery',\n    RemoveCelery = 'removeCelery',\n    SetInputValue = 'setInputValue',\n    SetInputType = 'setInputType',\n    SetInputCurrency = 'setInputCurrency',\n    SetCommitmentValue = 'setCommitmentValue',\n    SetRating = 'setRating',\n    SetRatingTypeName = 'setRatingTypeName',\n    SetName = 'setName',\n    SetMin = 'setMin',\n    SetDesired = 'setDesired',\n    SetStore = 'setStore',\n    ResetStore = 'resetStore',\n    SetCurrencies = 'setCurrencies',\n    SetBaseCurrency = 'setBaseCurrency'\n}\n\nexport type Dispatch = React.Dispatch<Action>;\n\n// Loose typing, to avoid creating a type for every ActionType\n// TODO: Maybe a type for every ActionType... IS better?\nexport type Action = {\n    type: ActionType;\n    payload?: {\n        id?: string;\n        subID?: string;\n        data?: any;\n    };\n    meta?: any;\n};\n","import { InputType } from '../store/types';\n\n/** Returns a yearly salary given the input type */\nexport default function(\n    value: number | string,\n    type: InputType,\n    factor?: number\n): number {\n    if (!value) return 0;\n\n    if (typeof value === 'string') {\n        value = Number(value);\n    }\n\n    if (factor) {\n        value = value / factor;\n    }\n\n    // TODO: Get these in as variables\n    const workingDays = 365.25 - 52;\n    const hoursInDay = 8;\n\n    switch (type) {\n        case InputType.PerHour:\n            return value * hoursInDay * workingDays;\n\n        case InputType.PerDay:\n            return value * hoursInDay;\n\n        case InputType.PerMonth:\n            return (value * workingDays) / 12;\n\n        case InputType.PerYear:\n            return value;\n    }\n}\n","import React from 'react';\nimport NumberFormat from 'react-number-format';\nimport { TextField, TextFieldProps } from '@material-ui/core';\nimport styled, { css } from 'styled-components';\n\ninterface NumberFormatCustomProps {\n    inputRef: (instance: NumberFormat | null) => void;\n    onChange: (event: { target: { value: number } }) => void;\n    reversed?: boolean;\n}\n\nconst NumberFormatCustom: React.FC<NumberFormatCustomProps> = ({\n    inputRef,\n    onChange,\n    ...rest\n}) => (\n    <NumberFormat\n        getInputRef={inputRef}\n        onValueChange={values => {\n            onChange({\n                target: {\n                    value: Number(values.value)\n                }\n            });\n        }}\n        thousandSeparator\n        isNumericString\n        {...rest}\n    />\n);\n\n// TODO: Fix NumberField to type with these props\ntype NumberFieldProps = TextFieldProps & {\n    reversed?: boolean;\n    autoStretch?: boolean;\n};\n\nconst NumberField = styled(\n    ({ reversed, autoStretch, InputProps, ...props }) => (\n        <TextField\n            InputProps={{\n                inputComponent: NumberFormatCustom as any,\n                ...InputProps\n            }}\n            {...props}\n        />\n    )\n)`\n    ${({ autoStretch, value }) =>\n        autoStretch &&\n        css`\n            width: ${100 + Number(value.length) * 5}px;\n            max-width: ${100 + Number(value.length) * 5}px;\n        `}\n\n    ${({ reversed }) =>\n        reversed &&\n        css`\n            input: {\n                text-align: right;\n            }\n        `}\n`;\n\nexport default NumberField;\n","export enum CurrencyType {\n    AUD = 'AUD',\n    BGN = 'BGN',\n    BRL = 'BRL',\n    CAD = 'CAD',\n    CHF = 'CHF',\n    CNY = 'CNY',\n    CZK = 'CZK',\n    DKK = 'DKK',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    HKD = 'HKD',\n    HRK = 'HRK',\n    HUF = 'HUF',\n    IDR = 'IDR',\n    ILS = 'ILS',\n    INR = 'INR',\n    ISK = 'ISK',\n    JPY = 'JPY',\n    KRW = 'KRW',\n    MXN = 'MXN',\n    MYR = 'MYR',\n    NOK = 'NOK',\n    NZD = 'NZD',\n    PHP = 'PHP',\n    PLN = 'PLN',\n    RON = 'RON',\n    RUB = 'RUB',\n    SEK = 'SEK',\n    SGD = 'SGD',\n    THB = 'THB',\n    TRY = 'TRY',\n    USD = 'USD',\n    ZAR = 'ZAR'\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { CurrencyType } from '../services/types';\n\ninterface Props {\n    currencyCode: CurrencyType;\n}\n\nconst FlagImage = styled(({ currencyCode = '', ...rest }) => (\n    <img\n        src={`./flags/${currencyCode.toLowerCase()}.png`}\n        alt={currencyCode}\n        {...rest}\n    />\n))<Props>`\n    height: 12px;\n    margin-right: 8px;\n`;\n\nexport default FlagImage;\n","import React from 'react';\nimport { Select, MenuItem, SelectProps } from '@material-ui/core';\nimport { CurrencyType } from '../services/types';\nimport FlagImage from './FlagImage';\n\n// TODO: Group currencies by continent?\nconst CurrencySelect: React.FC<SelectProps> = props => (\n    <Select {...props}>\n        {Object.values(CurrencyType).map(currencyCode => (\n            <MenuItem key={currencyCode} value={currencyCode}>\n                <FlagImage currencyCode={currencyCode} />\n                {currencyCode}\n            </MenuItem>\n        ))}\n    </Select>\n);\n\nexport default CurrencySelect;\n","import React, { useEffect, useRef } from 'react';\nimport {\n    Box,\n    Button,\n    Grid,\n    TextField,\n    Select,\n    MenuItem,\n    InputAdornment,\n    FormControlLabel,\n    Switch,\n    Typography\n} from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport CountUp from 'react-countup';\nimport calculateSalary from '../utils/calculateSalary';\nimport NumberField from './NumberField';\nimport styled from 'styled-components';\nimport {\n    ActionType,\n    Celery,\n    InputType,\n    Dispatch,\n    Commitment\n} from '../store/types';\nimport CurrencySelect from './CurrencySelect';\nimport { CurrencyType } from '../services/types';\nimport { Rating } from '@material-ui/lab';\n\ninterface CeleryBoxProps extends Celery {\n    id: string;\n    dispatch: Dispatch;\n    index: number;\n    rateFactor?: number;\n    baseCurrency: CurrencyType;\n    defaults: {\n        fullTime: Commitment;\n        partTime: Commitment;\n    };\n    ratings: { [x: string]: number };\n    ratingTypes: { [x: string]: string };\n}\n\nconst StyledTextField = styled(TextField)`\n    input {\n        font-size: 1.5em;\n    }\n`;\n\nconst usePrevious = <T extends {}>(value: T) => {\n    const ref = useRef<T>();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n};\n\nconst StyledSwitch = styled(Switch)`\n    ${({ checked }) =>\n        !checked &&\n        `\n            .MuiIconButton-label {\n                color: #00a0ff;\n            }\n            .MuiSwitch-track {\n                background: #00a0ff;\n            }\n    `}\n`;\n\nconst CeleryBox: React.FC<CeleryBoxProps> = ({\n    id,\n    name,\n    index,\n    // TODO: Pass entire state, or use context/hooks\n    input: { value, type, currency },\n    commitment: { fullTime, hoursInDay, daysInWeek, vacationDays, holidayDays },\n    ratings,\n    ratingTypes,\n    defaults,\n    baseCurrency,\n    rateFactor,\n    dispatch\n}) => {\n    const salary = calculateSalary(value, type, rateFactor);\n    const prevSalary = usePrevious(salary);\n    const defaultValues = defaults[fullTime ? 'fullTime' : 'partTime'];\n\n    return (\n        <Box style={{ padding: '1em' }}>\n            <Grid container spacing={3}>\n                <Grid item sm={3} xs={12}>\n                    <StyledTextField\n                        name=\"name\"\n                        placeholder={`Company ${index + 1}`}\n                        color=\"secondary\"\n                        value={name}\n                        style={{\n                            marginBottom: 15\n                        }}\n                        fullWidth\n                        autoFocus\n                        autoComplete=\"off\"\n                        onChange={(\n                            event: React.ChangeEvent<HTMLInputElement>\n                        ) => {\n                            dispatch({\n                                type: ActionType.SetName,\n                                payload: {\n                                    id,\n                                    data: event.target.value\n                                }\n                            });\n                        }}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <FormControlLabel\n                                        label={\n                                            fullTime ? 'Full-Time' : 'Part-Time'\n                                        }\n                                        control={\n                                            <StyledSwitch\n                                                size=\"small\"\n                                                checked={fullTime}\n                                                onChange={(\n                                                    e: React.ChangeEvent<\n                                                        HTMLInputElement\n                                                    >\n                                                ) => {\n                                                    dispatch({\n                                                        type:\n                                                            ActionType.SetCommitmentValue,\n                                                        payload: {\n                                                            id,\n                                                            subID: 'fullTime',\n                                                            data:\n                                                                e.target.checked\n                                                        }\n                                                    });\n                                                }}\n                                            />\n                                        }\n                                    />\n                                </InputAdornment>\n                            )\n                        }}\n                    />\n                    <NumberField\n                        name=\"value\"\n                        variant=\"outlined\"\n                        autoComplete=\"off\"\n                        // TODO: Show 'default' option to use base\n                        value={value}\n                        onChange={(\n                            event: React.ChangeEvent<HTMLInputElement>\n                        ) => {\n                            dispatch({\n                                type: ActionType.SetInputValue,\n                                payload: {\n                                    id,\n                                    data: event.target.value\n                                }\n                            });\n                        }}\n                        placeholder=\"0.00\"\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    $\n                                </InputAdornment>\n                            ),\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <Select\n                                        value={type}\n                                        onChange={(\n                                            e: React.ChangeEvent<{\n                                                value: unknown;\n                                            }>\n                                        ) => {\n                                            dispatch({\n                                                type: ActionType.SetInputType,\n                                                payload: {\n                                                    id,\n                                                    data: e.target.value\n                                                }\n                                            });\n                                        }}\n                                    >\n                                        {Object.values(InputType).map(type => (\n                                            <MenuItem key={type} value={type}>\n                                                {type}\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                    <CurrencySelect\n                                        value={currency || baseCurrency}\n                                        onChange={(\n                                            e: React.ChangeEvent<{\n                                                value: unknown;\n                                            }>\n                                        ) => {\n                                            dispatch({\n                                                type:\n                                                    ActionType.SetInputCurrency,\n                                                payload: {\n                                                    id,\n                                                    data: e.target.value\n                                                }\n                                            });\n                                        }}\n                                    />\n                                </InputAdornment>\n                            )\n                        }}\n                    />\n                </Grid>\n                <Grid item sm={3} xs={12}>\n                    <Grid container>\n                        {Object.entries(ratingTypes).map(([ratingID, name]) => (\n                            <Grid item md={6} sm={12} key={ratingID}>\n                                <Typography\n                                    component=\"legend\"\n                                    variant=\"caption\"\n                                >\n                                    {name}\n                                </Typography>\n                                <Rating\n                                    size=\"small\"\n                                    value={ratings[ratingID] || 0}\n                                    precision={0.5}\n                                    onChange={(\n                                        e: React.ChangeEvent<{}>,\n                                        value: number | null\n                                    ) => {\n                                        dispatch({\n                                            type: ActionType.SetRating,\n                                            payload: {\n                                                id,\n                                                subID: ratingID,\n                                                data: value || 0\n                                            }\n                                        });\n                                    }}\n                                />\n                            </Grid>\n                        ))}\n                    </Grid>\n                </Grid>\n                <Grid item sm={3} xs={12}>\n                    <Box>\n                        <Grid container>\n                            <Grid item sm={12} md={6}>\n                                <NumberField\n                                    label=\"I work:\"\n                                    style={{ maxWidth: 110 }}\n                                    value={\n                                        hoursInDay !== null\n                                            ? hoursInDay\n                                            : defaultValues.hoursInDay\n                                    }\n                                    InputProps={{\n                                        endAdornment: (\n                                            <InputAdornment position=\"end\">\n                                                {hoursInDay === 1\n                                                    ? 'hour'\n                                                    : 'hours'}\n                                                /day\n                                            </InputAdornment>\n                                        )\n                                    }}\n                                    onChange={(\n                                        e: React.ChangeEvent<HTMLInputElement>\n                                    ) => {\n                                        if (Number(e.target.value) > 24) return;\n\n                                        dispatch({\n                                            type: ActionType.SetCommitmentValue,\n                                            payload: {\n                                                id,\n                                                subID: 'hoursInDay',\n                                                data: e.target.value\n                                            }\n                                        });\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item sm={12} md={6}>\n                                <NumberField\n                                    label=\"Within:\"\n                                    style={{ maxWidth: 110 }}\n                                    value={\n                                        daysInWeek !== null\n                                            ? daysInWeek\n                                            : defaultValues.daysInWeek\n                                    }\n                                    InputProps={{\n                                        max: 7,\n                                        endAdornment: (\n                                            <InputAdornment position=\"end\">\n                                                {daysInWeek === 1\n                                                    ? 'day'\n                                                    : 'days'}\n                                                /week\n                                            </InputAdornment>\n                                        )\n                                    }}\n                                    onChange={(\n                                        e: React.ChangeEvent<HTMLInputElement>\n                                    ) => {\n                                        dispatch({\n                                            type: ActionType.SetCommitmentValue,\n                                            payload: {\n                                                id,\n                                                subID: 'daysInWeek',\n                                                data: e.target.value\n                                            }\n                                        });\n                                    }}\n                                />\n                            </Grid>\n                        </Grid>\n\n                        {fullTime && (\n                            <Grid container>\n                                <Grid item sm={12} md={6}>\n                                    <NumberField\n                                        label=\"Vacation\"\n                                        style={{ maxWidth: 110 }}\n                                        value={\n                                            vacationDays !== null\n                                                ? vacationDays\n                                                : defaultValues.vacationDays\n                                        }\n                                        InputProps={{\n                                            max: 365, // TODO: Calculate remaining\n                                            endAdornment: (\n                                                <InputAdornment position=\"end\">\n                                                    {vacationDays === 1\n                                                        ? 'day'\n                                                        : 'days'}\n                                                    /year\n                                                </InputAdornment>\n                                            )\n                                        }}\n                                        onChange={(\n                                            e: React.ChangeEvent<\n                                                HTMLInputElement\n                                            >\n                                        ) => {\n                                            dispatch({\n                                                type:\n                                                    ActionType.SetCommitmentValue,\n                                                payload: {\n                                                    id,\n                                                    subID: 'vacationDays',\n                                                    data: e.target.value\n                                                }\n                                            });\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item sm={12} md={6}>\n                                    <NumberField\n                                        label=\"Holiday\"\n                                        value={\n                                            holidayDays !== null\n                                                ? holidayDays\n                                                : defaultValues.holidayDays\n                                        }\n                                        style={{ maxWidth: 110 }}\n                                        InputProps={{\n                                            max: 365, // TODO: Calculate remaining\n                                            endAdornment: (\n                                                <InputAdornment position=\"end\">\n                                                    {holidayDays === 1\n                                                        ? 'day'\n                                                        : 'days'}\n                                                    /year\n                                                </InputAdornment>\n                                            )\n                                        }}\n                                        onChange={(\n                                            e: React.ChangeEvent<\n                                                HTMLInputElement\n                                            >\n                                        ) => {\n                                            dispatch({\n                                                type:\n                                                    ActionType.SetCommitmentValue,\n                                                payload: {\n                                                    id,\n                                                    subID: 'holidayDays',\n                                                    data: e.target.value\n                                                }\n                                            });\n                                        }}\n                                    />\n                                </Grid>\n                            </Grid>\n                        )}\n                    </Box>\n                </Grid>\n                <Grid item sm={3} xs={12}>\n                    Salary:{' '}\n                    <strong>\n                        <CountUp\n                            // Don't animate if it's already PerYear\n                            start={\n                                type === InputType.PerYear ? salary : prevSalary\n                            }\n                            end={salary}\n                            prefix=\"$\"\n                            decimals={0}\n                            duration={1}\n                            separator=\",\"\n                        />\n                    </strong>{' '}\n                    / year\n                    <Box>\n                        <Button\n                            onClick={() =>\n                                dispatch({\n                                    type: ActionType.RemoveCelery,\n                                    payload: { id, data: null }\n                                })\n                            }\n                        >\n                            <Delete color=\"error\" />\n                        </Button>\n                    </Box>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n\nexport default CeleryBox;\n","import uuid, { v4 as generateId } from 'uuid';\nimport { Celery, State, InputType, ActionType, Action } from './types';\nimport { CurrencyType } from '../services/types';\n\n// TODO: Predict from browser location?\nconst defaultCurrency: CurrencyType = CurrencyType.USD;\n\nconst newCelery = ({ currency } = { currency: null }) => ({\n    [generateId()]: {\n        name: '',\n        input: {\n            value: 0,\n            type: InputType.PerYear,\n            currency\n        },\n        commitment: {\n            fullTime: true,\n            hoursInDay: null,\n            daysInWeek: null,\n            vacationDays: null,\n            holidayDays: null\n        },\n        ratings: {}\n    } as Celery\n});\n\n// Grab initialState from persistedStore in localStorage (if exists)\nexport const defaultState: State = {\n    min: 1,\n    desired: 75000,\n    celeries: newCelery(),\n    timestamp: +new Date(),\n    currencies: {\n        base: defaultCurrency\n    },\n    defaults: {\n        fullTime: {\n            hoursInDay: 8,\n            daysInWeek: 5,\n            vacationDays: 0,\n            holidayDays: 0\n        },\n        partTime: {\n            hoursInDay: 3,\n            daysInWeek: 2,\n            vacationDays: 0,\n            holidayDays: 0\n        }\n    },\n    ratingTypes: {\n        [uuid()]: 'Culture',\n        [uuid()]: 'Work Life',\n        [uuid()]: 'Benefits',\n        [uuid()]: 'Likeability'\n    }\n};\n\nconst PERSISTED_STORE_NAME = 'persistedStore';\n\nconst persistedStore = window.localStorage.getItem(PERSISTED_STORE_NAME);\n\n// TODO: Move this out, consolidate with useEffect in App.tsx\n// TODO: Deep-merge persistedStore into defaultState\nexport const initialState: State = persistedStore\n    ? JSON.parse(persistedStore)\n    : defaultState;\n\nconst reduceStore = (state: State, action: Action): State => {\n    const { type } = action;\n\n    if (action.payload) {\n        const { payload } = action;\n\n        if (payload.id) {\n            switch (type) {\n                case ActionType.RemoveCelery:\n                    const { [payload.id]: _, ...celeries } = state.celeries;\n\n                    return {\n                        ...state,\n                        celeries\n                    };\n\n                case ActionType.SetInputValue:\n                    return {\n                        ...state,\n                        celeries: {\n                            ...state.celeries,\n                            [payload.id]: {\n                                ...state.celeries[payload.id],\n                                input: {\n                                    ...state.celeries[payload.id].input,\n                                    value: payload.data\n                                }\n                            }\n                        }\n                    };\n\n                case ActionType.SetInputType:\n                    return {\n                        ...state,\n                        celeries: {\n                            ...state.celeries,\n                            [payload.id]: {\n                                ...state.celeries[payload.id],\n                                input: {\n                                    ...state.celeries[payload.id].input,\n                                    type: payload.data\n                                }\n                            }\n                        }\n                    };\n\n                case ActionType.SetInputCurrency:\n                    return {\n                        ...state,\n                        celeries: {\n                            ...state.celeries,\n                            [payload.id]: {\n                                ...state.celeries[payload.id],\n                                input: {\n                                    ...state.celeries[payload.id].input,\n                                    currency: payload.data\n                                }\n                            }\n                        }\n                    };\n\n                case ActionType.SetName:\n                    return {\n                        ...state,\n                        celeries: {\n                            ...state.celeries,\n                            [payload.id]: {\n                                ...state.celeries[payload.id],\n                                name: payload.data\n                            }\n                        }\n                    };\n\n                case ActionType.SetCommitmentValue:\n                    if (!payload.subID) {\n                        console.warn(`Missing subID (is: ${payload.subID})`);\n                        return state;\n                    }\n\n                    return {\n                        ...state,\n                        celeries: {\n                            ...state.celeries,\n                            [payload.id]: {\n                                ...state.celeries[payload.id],\n                                commitment: {\n                                    ...state.celeries[payload.id].commitment,\n                                    [payload.subID]: payload.data\n                                }\n                            }\n                        }\n                    };\n\n                case ActionType.SetRating:\n                    if (!payload.subID) {\n                        console.warn(`Missing subID (is: ${payload.subID})`);\n                        return state;\n                    }\n\n                    return {\n                        ...state,\n                        celeries: {\n                            ...state.celeries,\n                            [payload.id]: {\n                                ...state.celeries[payload.id],\n                                ratings: {\n                                    ...state.celeries[payload.id].ratings,\n                                    [payload.subID]: payload.data\n                                }\n                            }\n                        }\n                    };\n\n                case ActionType.SetRatingTypeName:\n                    return {\n                        ...state,\n                        ratingTypes: {\n                            ...state.ratingTypes,\n                            [payload.id]: payload.data\n                        }\n                    };\n            }\n        } else if (typeof payload.data !== undefined) {\n            switch (type) {\n                case ActionType.SetStore:\n                    return payload.data;\n\n                case ActionType.SetCurrencies:\n                    return {\n                        ...state,\n                        currencies: payload.data\n                    };\n\n                case ActionType.SetBaseCurrency:\n                    const { rates = {} } = state.currencies;\n\n                    const previousBaseCurrency = (rates[\n                        state.currencies.base\n                    ] as unknown) as number;\n\n                    const newBaseCurrency = (rates[\n                        payload.data\n                    ] as unknown) as number;\n\n                    // Re-proportion currency rates to new\n                    const factor = newBaseCurrency / previousBaseCurrency;\n\n                    const newRates = Object.values(rates).reduce(\n                        (acc, val) => ({ ...acc, [val]: Number(val) * factor }),\n                        {}\n                    );\n\n                    return {\n                        ...state,\n                        currencies: {\n                            ...state.currencies,\n                            base: payload.data,\n                            rates: newRates\n                        }\n                    };\n\n                case ActionType.SetMin:\n                    return {\n                        ...state,\n                        min: payload.data\n                    };\n\n                case ActionType.SetDesired:\n                    return {\n                        ...state,\n                        desired: payload.data\n                    };\n            }\n        }\n    }\n\n    switch (type) {\n        case ActionType.AddCelery:\n            return {\n                ...state,\n                celeries: {\n                    ...state.celeries,\n                    ...newCelery()\n                }\n            };\n\n        case ActionType.ResetStore:\n            if ('localStorage' in window) {\n                localStorage.removeItem(PERSISTED_STORE_NAME);\n            }\n\n            return defaultState;\n\n        default:\n            console.warn(\n                `Action ${type} did not alter the state! Are you missing a reducer, my friend?`\n            );\n            return state;\n    }\n};\n\nconst reducer = (state: State, action: Action): State => {\n    // Timestamp this new version of the state\n    state = {\n        ...state,\n        timestamp: +new Date()\n    };\n\n    if (process.env.NODE_ENV === 'development') {\n        console.log('-----------');\n        console.info('action:', action);\n    }\n\n    // Reduce state with dispatched action\n    state = reduceStore(state, action);\n\n    if (process.env.NODE_ENV === 'development') {\n        console.info('state', state);\n        console.log('-----------');\n    }\n\n    // Persist new state to localStorage\n    if ('localStorage' in window) {\n        localStorage.setItem(PERSISTED_STORE_NAME, JSON.stringify(state));\n    }\n\n    return state;\n};\n\nexport default reducer;\n","import React, { useState } from 'react';\nimport {\n    Drawer,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button,\n    Collapse,\n    IconButton,\n    InputLabel,\n    FormControl,\n    Typography,\n    InputAdornment,\n    TextField\n} from '@material-ui/core';\nimport {\n    DeleteForever,\n    ExpandLess,\n    ExpandMore,\n    Close,\n    Settings,\n    AccountBalance,\n    Star\n} from '@material-ui/icons';\nimport { Dispatch, ActionType, Currencies } from '../store/types';\nimport styled from 'styled-components';\nimport { CurrencyType } from '../services/types';\nimport FlagImage from './FlagImage';\nimport NumberField from './NumberField';\nimport CurrencySelect from './CurrencySelect';\n\ninterface DrawerMenuProps {\n    dispatch: Dispatch;\n    isOpen: boolean;\n    setIsOpen: (a: boolean) => void;\n    currencies: Currencies;\n    min: number;\n    desired: number;\n    ratingTypes: {\n        [x: string]: string;\n    };\n}\n\nconst StyledDrawer = styled(Drawer)`\n    min-width: 300px;\n`;\n\nconst DrawerMenu: React.FC<DrawerMenuProps> = ({\n    dispatch,\n    isOpen,\n    setIsOpen,\n    currencies: { base, rates, date },\n    min,\n    desired,\n    ratingTypes\n}) => {\n    const [modalIsOpen, setResetModalIsOpen] = useState(false);\n    const [currenciesIsOpen, setCurrenciesIsOpen] = useState(false);\n    const [settingsIsOpen, setSettingsIsOpen] = useState(false);\n    const [ratingsIsOpen, setRatingsIsOpen] = useState(false);\n\n    return (\n        <StyledDrawer anchor=\"left\" variant=\"persistent\" open={isOpen}>\n            <ListItem divider>\n                <IconButton onClick={() => setIsOpen(false)}>\n                    <Close />\n                </IconButton>\n                <ListItemText />\n                <FormControl>\n                    <InputLabel id=\"defaultCurrency\">Currency</InputLabel>\n                    <CurrencySelect\n                        value={base}\n                        onChange={e => {\n                            dispatch({\n                                type: ActionType.SetBaseCurrency,\n                                payload: { data: e.target.value }\n                            });\n                        }}\n                    />\n                </FormControl>\n            </ListItem>\n\n            <ListItem>\n                <ListItemText>\n                    <NumberField\n                        name=\"min\"\n                        label=\"Minimum\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                            dispatch({\n                                type: ActionType.SetMin,\n                                payload: {\n                                    data: e.target.value\n                                }\n                            });\n                        }}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    $\n                                </InputAdornment>\n                            )\n                        }}\n                        value={min}\n                        placeholder=\"0.00\"\n                        autoFocus\n                    />\n                </ListItemText>\n            </ListItem>\n\n            <ListItem>\n                <NumberField\n                    name=\"desired\"\n                    label=\"Desired\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        dispatch({\n                            type: ActionType.SetDesired,\n                            payload: {\n                                data: Number(e.target.value)\n                            }\n                        });\n                    }}\n                    InputProps={{\n                        startAdornment: (\n                            <InputAdornment position=\"start\">$</InputAdornment>\n                        )\n                    }}\n                    value={desired}\n                    placeholder=\"0.00\"\n                />\n            </ListItem>\n\n            <ListItem button onClick={() => setSettingsIsOpen(!settingsIsOpen)}>\n                <ListItemIcon>\n                    <Settings />\n                </ListItemIcon>\n                <ListItemText primary=\"Settings\" />\n                {settingsIsOpen ? <ExpandLess /> : <ExpandMore />}\n            </ListItem>\n            <Collapse in={settingsIsOpen}>\n                <List\n                    style={{\n                        marginLeft: '1em',\n                        paddingBottom: '2px'\n                    }}\n                >\n                    <ListItem button onClick={() => setResetModalIsOpen(true)}>\n                        <ListItemIcon>\n                            <DeleteForever />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Reset Data\" />\n                    </ListItem>\n                    {/* TODO: More settings */}\n                </List>\n            </Collapse>\n\n            <ListItem button onClick={() => setRatingsIsOpen(!ratingsIsOpen)}>\n                <ListItemIcon>\n                    <Star />\n                </ListItemIcon>\n                <ListItemText primary=\"Ratings\" />\n                {ratingsIsOpen ? <ExpandLess /> : <ExpandMore />}\n            </ListItem>\n            <Collapse in={ratingsIsOpen}>\n                <List\n                    style={{\n                        marginLeft: '1em',\n                        paddingBottom: '2px'\n                    }}\n                >\n                    {Object.entries(ratingTypes).map(\n                        ([ratingID, name], index) => (\n                            <ListItem key={ratingID}>\n                                <TextField\n                                    label={`Rating ${index + 1}`}\n                                    value={name}\n                                    onChange={e => {\n                                        dispatch({\n                                            type: ActionType.SetRatingTypeName,\n                                            payload: {\n                                                id: ratingID,\n                                                data: e.target.value\n                                            }\n                                        });\n                                    }}\n                                />\n                            </ListItem>\n                        )\n                    )}\n                    {/* TODO: More settings */}\n                </List>\n            </Collapse>\n\n            <ListItem\n                button\n                onClick={() => setCurrenciesIsOpen(!currenciesIsOpen)}\n            >\n                <ListItemIcon>\n                    <AccountBalance />\n                </ListItemIcon>\n                <ListItemText\n                    primary=\"Exchange\"\n                    secondary={`($1 ${base})`}\n                    secondaryTypographyProps={{\n                        variant: 'caption',\n                        display: 'block'\n                    }}\n                />\n                {currenciesIsOpen ? <ExpandLess /> : <ExpandMore />}\n            </ListItem>\n\n            <Collapse in={currenciesIsOpen}>\n                <Typography align=\"center\" variant=\"caption\" display=\"block\">\n                    Updated: {date}\n                </Typography>\n                <List>\n                    {Object.values(CurrencyType)\n                        .filter(currency => currency !== base)\n                        .map(currency => (\n                            <ListItem key={currency}>\n                                <ListItemIcon>\n                                    <FlagImage currencyCode={currency} />\n                                </ListItemIcon>\n                                <ListItemText\n                                    primary={currency}\n                                    {...(rates\n                                        ? {\n                                              secondary: Number(\n                                                  rates[currency]\n                                              ).toFixed(3)\n                                          }\n                                        : {})}\n                                    secondaryTypographyProps={{\n                                        variant: 'caption',\n                                        style: {\n                                            marginLeft: 10\n                                        }\n                                    }}\n                                />\n                            </ListItem>\n                        ))}\n                </List>\n            </Collapse>\n\n            <Dialog open={modalIsOpen}>\n                <DialogTitle>\n                    <DeleteForever /> Reset Database\n                </DialogTitle>\n                <DialogContent dividers>\n                    Are you sure you want to reset your Celery database?\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        autoFocus\n                        onClick={() => setResetModalIsOpen(false)}\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            dispatch({\n                                type: ActionType.ResetStore\n                            });\n                            setResetModalIsOpen(false);\n                            setIsOpen(false);\n                        }}\n                        color=\"primary\"\n                    >\n                        Reset\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </StyledDrawer>\n    );\n};\n\nexport default DrawerMenu;\n","/** Formats number for contracted money display ($/K/M), with 1 decimal place */\nexport default function calculateSalary(value: number): string {\n    if (value >= 1000000) {\n        return `${format(value / 1000000)}M`;\n    } else if (value >= 1000) {\n        return `${format(value / 1000)}K`;\n    } else {\n        return `$${format(value)}`;\n    }\n}\n\n/** Limit to 1 decimal place, or 3 total digits */\nfunction format(value: number) {\n    let stringValue: string = value.toFixed(1);\n\n    if (Number(stringValue[stringValue.length - 1]) === 0) {\n        value = Math.floor(value);\n    } else if (stringValue.length > 3) {\n        value = Number(value.toFixed(0));\n    } else {\n        value = Number(stringValue);\n    }\n\n    return value;\n}\n\nconsole.log(calculateSalary(123433));\n","import React, { useEffect, useReducer, useState } from 'react';\nimport { hot } from 'react-hot-loader/root';\nimport {\n    Button,\n    AppBar,\n    Toolbar,\n    SvgIcon,\n    Typography,\n    Container,\n    Grid,\n    Grow,\n    Slider,\n    Paper,\n    Snackbar,\n    Backdrop\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { AddCircleOutline, Menu } from '@material-ui/icons';\nimport { ReactComponent as CeleryIcon } from './CeleryIcon.svg';\nimport styled from 'styled-components';\n\nimport CeleryBox from './CeleryBox';\nimport reducer, { initialState } from '../store/reducer';\nimport { ActionType } from '../store/types';\nimport calculateSalary from '../utils/calculateSalary';\nimport DrawerMenu from './DrawerMenu';\nimport formatMoney from '../utils/formatMoney';\nimport { fetchCurrencyRates } from '../services/fetchCurrencyRates';\n\nconst Layout = styled.div`\n    height: 100vh;\n    max-width: 100vw;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst TopNav = styled(Toolbar)`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n`;\n\nconst StyledSlider = styled(Slider)`\n    .MuiSlider-thumb {\n        transition: left 0.25s ease;\n    }\n    .MuiSlider-markLabel {\n        text-align: center;\n        max-width: 50px;\n    }\n`;\n\nconst StyledBackdrop = styled(Backdrop)`\n    z-index: ${({ theme }) => theme.zIndex.drawer - 1};\n`;\n\nconst App: React.FC = () => {\n    // TODO: Provide state & dispatch to children as context?\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const [restored, setRestored] = useState(false);\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false);\n\n    useEffect(() => {\n        fetchCurrencyRates(state.currencies.base, dispatch);\n    }, [state.currencies.base, dispatch]);\n\n    useEffect(() => {\n        const restoreLatestLocalStorage = () => {\n            // TODO: Deep-merge persistedStore into defaultState\n            const persistedStore = JSON.parse(\n                window.localStorage.getItem('persistedStore') || '{}'\n            );\n\n            // Override the store with persisted one if it's newer\n            if (persistedStore && persistedStore.timestamp > state.timestamp) {\n                setRestored(true);\n\n                // TODO: Migrate the persisted store if schema has changed?\n                dispatch({\n                    type: ActionType.SetStore,\n                    payload: { data: persistedStore }\n                });\n            }\n        };\n\n        window.addEventListener('focus', restoreLatestLocalStorage);\n\n        return () =>\n            window.removeEventListener('focus', restoreLatestLocalStorage);\n    }, [state.timestamp, dispatch]);\n\n    const salaries = Object.values(state.celeries)\n        .map(({ input }) => calculateSalary(input.value, input.type))\n        .filter(value => value > 0);\n\n    return (\n        <Layout>\n            <AppBar position=\"static\">\n                <TopNav>\n                    <Menu onClick={() => setDrawerIsOpen(!drawerIsOpen)} />\n                    <Typography\n                        variant=\"h6\"\n                        component=\"h1\"\n                        style={{\n                            fontWeight: 'bold'\n                        }}\n                    >\n                        Celery\n                        <SvgIcon\n                            viewBox=\"0 0 512 512\"\n                            style={{ marginLeft: 10, verticalAlign: 'sub' }}\n                        >\n                            <CeleryIcon />\n                        </SvgIcon>\n                    </Typography>\n                </TopNav>\n            </AppBar>\n\n            <StyledBackdrop\n                open={drawerIsOpen}\n                onClick={() => setDrawerIsOpen(false)}\n            />\n            <DrawerMenu\n                dispatch={dispatch}\n                isOpen={drawerIsOpen}\n                setIsOpen={setDrawerIsOpen}\n                currencies={state.currencies}\n                min={state.min}\n                desired={state.desired}\n                ratingTypes={state.ratingTypes}\n            />\n\n            <Container\n                style={{\n                    height: 'calc(100vh - 64px)',\n                    maxHeight: 'calc(100vh - 64px)',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    padding: '3em 0 1em'\n                }}\n            >\n                <Grid\n                    container\n                    direction=\"column\"\n                    spacing={2}\n                    style={{ flex: 1 }}\n                >\n                    {Object.entries(state.celeries).map(\n                        ([id, celery], index) => (\n                            <Grid item key={id}>\n                                <Grow in>\n                                    <Paper>\n                                        <CeleryBox\n                                            key={id}\n                                            index={index}\n                                            id={id}\n                                            dispatch={dispatch}\n                                            {...(state.currencies.rates\n                                                ? {\n                                                      rateFactor: (state\n                                                          .currencies.rates[\n                                                          celery.input\n                                                              .currency ||\n                                                              state.currencies\n                                                                  .base\n                                                      ] as unknown) as number\n                                                  }\n                                                : {})}\n                                            baseCurrency={state.currencies.base}\n                                            defaults={state.defaults}\n                                            ratingTypes={state.ratingTypes}\n                                            {...celery}\n                                        />\n                                    </Paper>\n                                </Grow>\n                            </Grid>\n                        )\n                    )}\n\n                    <Grid item>\n                        <Button\n                            size=\"large\"\n                            color=\"primary\"\n                            onClick={() =>\n                                dispatch({ type: ActionType.AddCelery })\n                            }\n                            endIcon={<AddCircleOutline />}\n                        >\n                            Add New\n                        </Button>\n                    </Grid>\n                </Grid>\n\n                <Grid item>\n                    <Grid container spacing={2} style={{ marginTop: '3em' }}>\n                        <Grid item>\n                            <Typography variant=\"h6\" color=\"textSecondary\">\n                                &nbsp;$&nbsp;\n                            </Typography>\n                        </Grid>\n\n                        <Grid item style={{ flex: 1 }}>\n                            <StyledSlider\n                                color=\"secondary\"\n                                track={false}\n                                min={Math.min(state.min, ...salaries)}\n                                max={Math.max(state.desired, ...salaries)}\n                                value={salaries}\n                                valueLabelFormat={formatMoney}\n                                marks={[\n                                    {\n                                        label: `Min.\n                                        (${formatMoney(state.min)})`,\n                                        value: state.min\n                                    },\n                                    {\n                                        label: `Des.\n                                        (${formatMoney(state.desired)})`,\n                                        value: state.desired\n                                    }\n                                ]}\n                                valueLabelDisplay=\"on\"\n                            />\n                        </Grid>\n\n                        <Grid item>\n                            <Typography variant=\"h6\" color=\"textSecondary\">\n                                $$$\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Container>\n\n            <Snackbar\n                open={restored}\n                autoHideDuration={4000}\n                onClose={() => setRestored(false)}\n            >\n                <Alert variant=\"filled\" severity=\"success\">\n                    Restored from your Local Storage!\n                </Alert>\n            </Snackbar>\n        </Layout>\n    );\n};\n\nexport default process.env.NODE_ENV === 'development' ? hot(App) : App;\n","import { Dispatch, ActionType } from '../store/types';\nimport { CurrencyType } from './types';\nimport querystring from 'querystring';\n\nconst API_URI = 'https://api.exchangeratesapi.io/latest';\n\nexport async function fetchCurrencyRates(\n    base: CurrencyType,\n    dispatch: Dispatch\n) {\n    try {\n        const request = await fetch(\n            `${API_URI}?${querystring.stringify({ base })}`\n        );\n        const data = await request.json();\n\n        dispatch({\n            type: ActionType.SetCurrencies,\n            payload: { data }\n        });\n    } catch (err) {\n        // dispatch error\n        console.error(err);\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// TODO: Convert to .ts\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {\n    ThemeProvider as MuiThemeProvider,\n    createMuiTheme,\n    responsiveFontSizes\n} from '@material-ui/core/styles';\nimport { ThemeProvider } from 'styled-components';\n\n// A custom theme for this app\nlet theme = createMuiTheme({\n    palette: {\n        common: { black: 'rgba(0, 0, 0, 1)', white: '#fff' },\n        background: {\n            paper: 'rgba(255, 255, 255, 1)',\n            default: 'rgba(239, 239, 239, 1)'\n        },\n        primary: {\n            light: 'rgba(175, 238, 107, 1)',\n            main: 'rgba(97, 186, 0, 1)',\n            dark: 'rgba(65, 117, 5, 1)',\n            contrastText: '#fff'\n        },\n        secondary: {\n            light: 'rgba(175, 238, 107, 1)',\n            main: 'rgba(97, 186, 0, 1)',\n            dark: 'rgba(65, 117, 5, 1)',\n            contrastText: '#fff'\n        },\n        error: {\n            light: '#e57373',\n            main: '#f44336',\n            dark: '#d32f2f',\n            contrastText: '#fff'\n        },\n        text: {\n            primary: 'rgba(59, 59, 59, 0.87)',\n            secondary: 'rgba(73, 73, 73, 0.6)',\n            disabled: 'rgba(0, 0, 0, 0.38)',\n            hint: 'rgba(0, 0, 0, 0.38)'\n        }\n    }\n});\n\ntheme = responsiveFontSizes(theme);\n\nReactDOM.render(\n    <MuiThemeProvider theme={theme}>\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <App />\n        </ThemeProvider>\n    </MuiThemeProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}