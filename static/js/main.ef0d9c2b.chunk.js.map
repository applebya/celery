{"version":3,"sources":["components/CeleryIcon.svg","store/types.ts","utils/calculateSalary.ts","components/NumberField.tsx","components/CeleryBox.tsx","store/reducer.ts","components/DrawerMenu.tsx","utils/formatMoney.ts","components/App.tsx","serviceWorker.js","index.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","InputType","ActionType","createElement","d","_ref","svgRef","title","props","id","x","y","viewBox","style","enableBackground","xmlSpace","ref","ForwardRef","forwardRef","value","type","Number","PerHour","PerDay","PerMonth","PerYear","NumberFormatCustom","inputRef","onChange","other","getInputRef","onValueChange","values","thousandSeparator","isNumericString","NumberField","styled","reversed","autoStretch","InputProps","TextField","InputAdornment","position","css","StyledTextField","CeleryBox","name","index","input","dispatch","salary","calculateSalary","prevSalary","useRef","useEffect","current","usePrevious","Box","padding","Grid","container","spacing","item","sm","xs","placeholder","color","marginBottom","fullWidth","autoFocus","event","SetName","payload","data","variant","autoComplete","SetInputValue","endAdornment","Select","e","SetInputType","map","MenuItem","flex","start","end","prefix","decimals","duration","separator","Button","onClick","RemoveCelery","Delete","newCelery","generateId","defaultState","min","desired","celeries","timestamp","Date","persistedStore","window","localStorage","getItem","initialState","JSON","parse","reducer","state","action","console","log","info","SetStore","SetMin","SetDesired","AddCelery","ResetStore","removeItem","warn","reduceStore","setItem","stringify","StyledDrawer","Drawer","DrawerMenu","isOpen","setIsOpen","useState","modalIsOpen","setResetModalIsOpen","anchor","open","IconButton","ChevronLeft","List","ListItem","button","ListItemIcon","DeleteForever","ListItemText","primary","Dialog","DialogTitle","DialogContent","dividers","DialogActions","format","stringValue","toFixed","Math","floor","Layout","div","TopNav","Toolbar","StyledSlider","Slider","process","useReducer","restored","setRestored","drawerIsOpen","setDrawerIsOpen","restoreLatestLocalStorage","addEventListener","removeEventListener","salaries","filter","AppBar","Menu","Typography","component","fontWeight","SvgIcon","marginLeft","verticalAlign","Container","height","maxHeight","display","flexDirection","direction","entries","celery","Grow","in","Paper","size","endIcon","AddCircleOutline","marginTop","track","max","valueLabelFormat","formatMoney","marks","label","valueLabelDisplay","justify","Snackbar","autoHideDuration","onClose","Alert","severity","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","theme","createMuiTheme","palette","common","black","white","background","paper","default","light","main","dark","contrastText","secondary","text","disabled","hint","responsiveFontSizes","ReactDOM","render","CssBaseline","document","getElementById","URL","href","origin","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ef0d9c2b.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", null, React.createElement(\"g\", null, React.createElement(\"path\", {\n  d: \"M511.996,245.866l-65.059-39.121l8.529-22.822l-0.071-0.027c5.41-3.978,10.784-8.645,16.179-14.042l17.831-17.838 l-61.131-22.201l10.7-57.672l-57.637,10.718l-22.214-61.122l-17.831,17.817c-4.269,4.266-10.384,10.383-16.226,18.151 l-19.794,7.368L266.131,0l-22.346,54.127l-58.118-40.495l4.805,37.372c2.188,17.059,4.818,37.564,13.533,56.35L42.408,268.951 c-25.364,25.355-39.493,52.092-41.996,79.47c-3.281,35.896,13.207,72.247,48.96,107.997l6.16,6.176 c32.824,32.821,66.109,49.407,99.087,49.405c2.988-0.001,5.979-0.137,8.961-0.41c27.373-2.504,54.113-16.631,79.477-41.992 l161.594-161.592c18.855,8.758,39.436,11.369,56.557,13.541l37.12,4.718l-40.463-58.056L511.996,245.866z M32.395,351.344 c1.801-19.698,12.808-39.778,32.719-59.682L244.38,112.4l-7.041-10.897c-3.616-5.597-6.272-11.887-8.302-18.509l29.183,20.334 l13.262-32.124l20.013,33.27l16.595-6.177c-0.563,5.883-0.377,12.097,0.85,18.637c-31.588,31.555-168.455,168.281-192.748,192.582 c-28.354,28.346-52.132,72.703-47.215,121.021C42.421,402.95,30.113,376.323,32.395,351.344z M104.359,389.927 c8.357-29.268,26.938-50.101,34.542-57.703c27.356-27.362,197.513-197.342,199.228-199.055l7.051-7.043l-3.182-9.445 c-4.189-12.437-1.721-23.362,5.044-34.161l13.408,36.893l38.416-7.144l-7.133,38.441l35.818,13.008 c-10.452,5.542-22.819,8.119-36.741,2.839l-9.701-3.677l-7.34,7.332c-1.727,1.725-173.004,172.808-200.381,200.185 c-8.242,8.242-35.576,32.797-72.546,37.694C101.446,402.082,102.618,396.024,104.359,389.927z M429.013,282.979 c-6.614-2.029-12.901-4.687-18.494-8.306l-10.899-7.054l-179.271,179.27c-34.696,34.691-68.864,41.999-105.341,21.79 c-5.523-9.315-9.501-18.828-11.898-28.511c47.973-5.68,82.632-36.702,92.988-47.057c24.237-24.238,161.307-161.156,193.577-193.39 c8.361,1.938,16.745,2.383,25.102,1.338l-7.269,19.45l33.272,20.008l-32.121,13.259L429.013,282.979z\"\n})));\n\nvar SvgCeleryIcon = function SvgCeleryIcon(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 512 512\",\n    style: {\n      enableBackground: \"new 0 0 512 512\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgCeleryIcon, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/CeleryIcon.8ccebf47.svg\";\nexport { ForwardRef as ReactComponent };","import { DeepReadonly } from 'ts-essentials';\n\n// Deeply immutable state\nexport type State = DeepReadonly<{\n    timestamp: number;\n    min: number;\n    desired: number;\n    celeries: {\n        [x: string]: Celery;\n    };\n}>;\n\nexport type Celery = {\n    name: string;\n    input: {\n        value: number;\n        type: InputType;\n    };\n};\n\nexport enum InputType {\n    PerHour = '/hour',\n    PerDay = '/day',\n    PerMonth = '/month',\n    PerYear = '/year'\n}\n\nexport enum ActionType {\n    AddCelery = 'addCelery',\n    RemoveCelery = 'removeCelery',\n    SetInputValue = 'setInputValue',\n    SetInputType = 'setInputType',\n    SetName = 'setName',\n    SetMin = 'setMin',\n    SetDesired = 'setDesired',\n    SetStore = 'setStore',\n    ResetStore = 'resetStore'\n}\n\nexport type Dispatch = React.Dispatch<Action>;\n\n// Loose typing, to avoid creating a type for every ActionType\nexport type Action = {\n    type: ActionType;\n    payload?: {\n        id?: string;\n        data?: any;\n    };\n    meta?: any;\n};\n","import { InputType } from '../store/types';\n\n/** Returns a yearly salary given the input type */\nexport default function(value: number | string, type: InputType): number {\n    if (!value) return 0;\n\n    if (typeof value === 'string') {\n        value = Number(value);\n    }\n\n    // TODO: Get these in as variables\n    const workingDays = 365.25 - 52;\n    const hoursInDay = 8;\n\n    switch (type) {\n        case InputType.PerHour:\n            return value * hoursInDay * workingDays;\n\n        case InputType.PerDay:\n            return value * hoursInDay;\n\n        case InputType.PerMonth:\n            return (value * workingDays) / 12;\n\n        case InputType.PerYear:\n            return value;\n    }\n}\n","import React from 'react';\nimport NumberFormat from 'react-number-format';\nimport { TextField, TextFieldProps, InputAdornment } from '@material-ui/core';\nimport styled, { css } from 'styled-components';\n\ninterface NumberFormatCustomProps {\n    inputRef: (instance: NumberFormat | null) => void;\n    onChange: (event: { target: { value: number } }) => void;\n    reversed?: boolean;\n}\n\nconst NumberFormatCustom: React.FC<NumberFormatCustomProps> = ({\n    inputRef,\n    onChange,\n    ...other\n}) => (\n    <NumberFormat\n        {...other}\n        getInputRef={inputRef}\n        onValueChange={values => {\n            onChange({\n                target: {\n                    value: Number(values.value)\n                }\n            });\n        }}\n        thousandSeparator\n        isNumericString\n    />\n);\n\n// TODO: Fix NumberField to type with these props\ntype NumberFieldProps = TextFieldProps & {\n    reversed?: boolean;\n    autoStretch?: boolean;\n};\n\nconst NumberField = styled(\n    ({ reversed, autoStretch, InputProps, ...props }) => (\n        <TextField\n            InputProps={{\n                [!props.reversed ? 'startAdornment' : 'endAdornment']: (\n                    <InputAdornment position=\"start\">$</InputAdornment>\n                ),\n                inputComponent: NumberFormatCustom as any,\n                ...InputProps\n            }}\n            {...props}\n        />\n    )\n)`\n    ${({ autoStretch, value }) =>\n        autoStretch &&\n        css`\n            width: ${100 + Number(value.length) * 5}px;\n            max-width: ${100 + Number(value.length) * 5}px;\n        `}\n\n    ${({ reversed }) =>\n        reversed &&\n        css`\n            input: {\n                text-align: right;\n            }\n        `}\n`;\n\nexport default NumberField;\n","import {\n    Box,\n    Button,\n    Grid,\n    TextField,\n    Select,\n    MenuItem,\n    InputAdornment\n} from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport React from 'react';\nimport CountUp from 'react-countup';\nimport calculateSalary from '../utils/calculateSalary';\nimport NumberField from './NumberField';\nimport styled from 'styled-components';\nimport { ActionType, Celery, InputType, Dispatch } from '../store/types';\n\nimport { useEffect, useRef } from 'react';\n\ninterface CeleryBoxProps extends Celery {\n    id: string;\n    dispatch: Dispatch;\n    index: number;\n}\n\nconst StyledTextField = styled(TextField)`\n    input {\n        font-size: 1.5em;\n    }\n`;\n\nconst usePrevious = <T extends {}>(value: T) => {\n    const ref = useRef<T>();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n};\n\nconst CeleryBox: React.FC<CeleryBoxProps> = ({\n    id,\n    name,\n    index,\n    input: { value, type },\n    dispatch\n}) => {\n    const salary = calculateSalary(value, type);\n    const prevSalary = usePrevious(salary);\n\n    return (\n        <Box style={{ padding: '1em' }}>\n            <Grid container spacing={2}>\n                <Grid item sm={4} xs={12}>\n                    <StyledTextField\n                        name=\"name\"\n                        placeholder={`Company ${index + 1}`}\n                        color=\"secondary\"\n                        value={name}\n                        style={{\n                            marginBottom: 15\n                        }}\n                        fullWidth\n                        autoFocus\n                        onChange={(\n                            event: React.ChangeEvent<HTMLInputElement>\n                        ) => {\n                            dispatch({\n                                type: ActionType.SetName,\n                                payload: {\n                                    id,\n                                    data: event.target.value\n                                }\n                            });\n                        }}\n                    />\n                    <NumberField\n                        name=\"value\"\n                        variant=\"outlined\"\n                        autoComplete=\"off\"\n                        value={value}\n                        onChange={(\n                            event: React.ChangeEvent<HTMLInputElement>\n                        ) => {\n                            dispatch({\n                                type: ActionType.SetInputValue,\n                                payload: {\n                                    id,\n                                    data: event.target.value\n                                }\n                            });\n                        }}\n                        placeholder=\"0.00\"\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <Select\n                                        value={type}\n                                        onChange={(\n                                            e: React.ChangeEvent<{\n                                                value: unknown;\n                                            }>\n                                        ) => {\n                                            dispatch({\n                                                type: ActionType.SetInputType,\n                                                payload: {\n                                                    id,\n                                                    data: e.target.value\n                                                }\n                                            });\n                                        }}\n                                    >\n                                        {Object.values(InputType).map(type => (\n                                            <MenuItem key={type} value={type}>\n                                                {type}\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                </InputAdornment>\n                            )\n                        }}\n                    />\n                </Grid>\n                <Grid item style={{ flex: 1 }}></Grid>\n                <Grid item sm={4} xs={12}>\n                    Salary:{' '}\n                    <strong>\n                        <CountUp\n                            // Don't animate if it's already PerYear\n                            start={\n                                type === InputType.PerYear ? salary : prevSalary\n                            }\n                            end={salary}\n                            prefix=\"$\"\n                            decimals={0}\n                            duration={1}\n                            separator=\",\"\n                        />\n                    </strong>{' '}\n                    / year\n                    <Box>\n                        <Button\n                            onClick={() =>\n                                dispatch({\n                                    type: ActionType.RemoveCelery,\n                                    payload: { id, data: null }\n                                })\n                            }\n                        >\n                            <Delete color=\"error\" />\n                        </Button>\n                    </Box>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n\nexport default CeleryBox;\n","import { v4 as generateId } from 'uuid';\nimport { Celery, State, InputType, ActionType, Action } from './types';\n\nconst newCelery = () => ({\n    [generateId()]: {\n        name: '',\n        input: {\n            value: 0,\n            type: InputType.PerYear\n        }\n    } as Celery\n});\n\n// Grab initialState from persistedStore in localStorage (if exists)\nconst defaultState: State = {\n    min: 1,\n    desired: 75000,\n    celeries: newCelery(),\n    timestamp: +new Date()\n};\n\nconst PERSISTED_STORE_NAME = 'persistedStore';\n\nconst persistedStore = window.localStorage.getItem(PERSISTED_STORE_NAME);\n\nexport const initialState: State = persistedStore\n    ? JSON.parse(persistedStore || '{}')\n    : defaultState;\n\nconst reduceStore = (state: State, action: Action): State => {\n    const { type } = action;\n\n    if (action.payload) {\n        const { payload } = action;\n\n        if (payload.id) {\n            switch (type) {\n                case ActionType.RemoveCelery:\n                    const { [payload.id]: _, ...celeries } = state.celeries;\n\n                    return {\n                        ...state,\n                        celeries\n                    };\n\n                case ActionType.SetInputValue:\n                    return {\n                        ...state,\n                        celeries: {\n                            ...state.celeries,\n                            [payload.id]: {\n                                ...state.celeries[payload.id],\n                                input: {\n                                    ...state.celeries[payload.id].input,\n                                    value: payload.data\n                                }\n                            }\n                        }\n                    };\n\n                case ActionType.SetInputType:\n                    return {\n                        ...state,\n                        celeries: {\n                            ...state.celeries,\n                            [payload.id]: {\n                                ...state.celeries[payload.id],\n                                input: {\n                                    ...state.celeries[payload.id].input,\n                                    type: payload.data\n                                }\n                            }\n                        }\n                    };\n\n                case ActionType.SetName:\n                    return {\n                        ...state,\n                        celeries: {\n                            ...state.celeries,\n                            [payload.id]: {\n                                ...state.celeries[payload.id],\n                                name: payload.data\n                            }\n                        }\n                    };\n            }\n        } else if (payload.data) {\n            switch (type) {\n                case ActionType.SetStore:\n                    return payload.data;\n\n                case ActionType.SetMin:\n                    return {\n                        ...state,\n                        min: payload.data\n                    };\n\n                case ActionType.SetDesired:\n                    return {\n                        ...state,\n                        desired: payload.data\n                    };\n            }\n        }\n    }\n\n    switch (type) {\n        case ActionType.AddCelery:\n            return {\n                ...state,\n                celeries: {\n                    ...state.celeries,\n                    ...newCelery()\n                }\n            };\n\n        case ActionType.ResetStore:\n            if ('localStorage' in window) {\n                localStorage.removeItem(PERSISTED_STORE_NAME);\n            }\n\n            return defaultState;\n\n        default:\n            console.warn(`Action ${type} did not alter the state`);\n            return state;\n    }\n};\n\nconst reducer = (state: State, action: Action): State => {\n    // Timestamp this new version of the state\n    state = {\n        ...state,\n        timestamp: +new Date()\n    };\n\n    console.log('-----------');\n    console.info('action:', action);\n\n    // Reduce state with dispatched action\n    state = reduceStore(state, action);\n\n    console.info('state', state);\n    console.log('-----------');\n\n    // Persist new state to localStorage\n    if ('localStorage' in window) {\n        localStorage.setItem(PERSISTED_STORE_NAME, JSON.stringify(state));\n    }\n\n    return state;\n};\n\nexport default reducer;\n","import React, { useState } from 'react';\nimport {\n    Drawer,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button\n} from '@material-ui/core';\nimport { Settings, ChevronLeft, DeleteForever } from '@material-ui/icons';\nimport { Dispatch, ActionType } from '../store/types';\nimport styled from 'styled-components';\n\ninterface DrawerMenuProps {\n    dispatch: Dispatch;\n    isOpen: boolean;\n    setIsOpen: (a: boolean) => void;\n}\n\nconst StyledDrawer = styled(Drawer)`\n    min-width: 300px;\n`;\n\nconst DrawerMenu: React.FC<DrawerMenuProps> = ({\n    dispatch,\n    isOpen,\n    setIsOpen\n}) => {\n    const [modalIsOpen, setResetModalIsOpen] = useState(false);\n\n    return (\n        <StyledDrawer anchor=\"left\" variant=\"persistent\" open={isOpen}>\n            <div>\n                <IconButton onClick={() => setIsOpen(false)}>\n                    <ChevronLeft />\n                </IconButton>\n            </div>\n            <List>\n                <ListItem button onClick={() => setResetModalIsOpen(true)}>\n                    <ListItemIcon>\n                        <DeleteForever />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Reset Data\" />\n                </ListItem>\n            </List>\n\n            <Dialog open={modalIsOpen}>\n                <DialogTitle>\n                    <DeleteForever /> Reset Database\n                </DialogTitle>\n                <DialogContent dividers>\n                    Are you sure you want to reset your Celery database?\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        autoFocus\n                        onClick={() => setResetModalIsOpen(false)}\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            dispatch({\n                                type: ActionType.ResetStore\n                            });\n                            setResetModalIsOpen(false);\n                            setIsOpen(false);\n                        }}\n                        color=\"primary\"\n                    >\n                        Reset\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </StyledDrawer>\n    );\n};\n\nexport default DrawerMenu;\n","/** Formats number for contracted money display ($/K/M), with 1 decimal place */\nexport default function calculateSalary(value: number): string {\n    if (value >= 1000000) {\n        return `${format(value / 1000000)}M`;\n    } else if (value >= 1000) {\n        return `${format(value / 1000)}K`;\n    } else {\n        return `$${format(value)}`;\n    }\n}\n\n/** Limit to 1 decimal place, or 3 total digits */\nfunction format(value: number) {\n    let stringValue: string = value.toFixed(1);\n\n    if (Number(stringValue[stringValue.length - 1]) === 0) {\n        value = Math.floor(value);\n    } else if (stringValue.length > 3) {\n        value = Number(value.toFixed(0));\n    } else {\n        value = Number(stringValue);\n    }\n\n    return value;\n}\n\nconsole.log(calculateSalary(123433));\n","import React, { useEffect, useReducer, useState } from 'react';\nimport { hot } from 'react-hot-loader/root';\nimport {\n    Button,\n    AppBar,\n    Toolbar,\n    SvgIcon,\n    Typography,\n    Container,\n    Grid,\n    Grow,\n    Slider,\n    Paper,\n    Snackbar,\n    Divider\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { AddCircleOutline, Menu } from '@material-ui/icons';\nimport { ReactComponent as CeleryIcon } from './CeleryIcon.svg';\nimport styled from 'styled-components';\n\nimport CeleryBox from './CeleryBox';\nimport reducer, { initialState } from '../store/reducer';\nimport { ActionType, State } from '../store/types';\nimport calculateSalary from '../utils/calculateSalary';\nimport NumberField from './NumberField';\nimport DrawerMenu from './DrawerMenu';\nimport formatMoney from '../utils/formatMoney';\n\nconst Layout = styled.div`\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst TopNav = styled(Toolbar)`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n`;\n\nconst StyledSlider = styled(Slider)`\n    .MuiSlider-thumb {\n        transition: left 0.25s ease;\n    }\n    .MuiSlider-markLabel {\n        text-align: center;\n        max-width: 50px;\n    }\n`;\n\nconst App: React.FC = () => {\n    // TODO: Provide state & dispatch to children as context?\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const [restored, setRestored] = useState(false);\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false);\n\n    useEffect(() => {\n        const restoreLatestLocalStorage = () => {\n            const persistedStore: State = JSON.parse(\n                window.localStorage.getItem('persistedStore') || '{}'\n            );\n\n            // Override the store with persisted one if it's newer\n            if (persistedStore && persistedStore.timestamp > state.timestamp) {\n                setRestored(true);\n\n                // TODO: Migrate the persisted store if schema has changed?\n                dispatch({\n                    type: ActionType.SetStore,\n                    payload: { data: persistedStore }\n                });\n            }\n        };\n\n        window.addEventListener('focus', restoreLatestLocalStorage);\n\n        return () =>\n            window.removeEventListener('focus', restoreLatestLocalStorage);\n    }, [state.timestamp, dispatch]);\n\n    const salaries = Object.values(state.celeries)\n        .map(({ input }) => calculateSalary(input.value, input.type))\n        .filter(value => value > 0);\n\n    return (\n        <Layout>\n            <AppBar position=\"static\">\n                <TopNav>\n                    <Menu onClick={() => setDrawerIsOpen(!drawerIsOpen)} />\n                    <Typography\n                        variant=\"h6\"\n                        component=\"h1\"\n                        style={{\n                            fontWeight: 'bold'\n                        }}\n                    >\n                        Celery\n                        <SvgIcon\n                            viewBox=\"0 0 512 512\"\n                            style={{ marginLeft: 10, verticalAlign: 'sub' }}\n                        >\n                            <CeleryIcon />\n                        </SvgIcon>\n                    </Typography>\n                </TopNav>\n            </AppBar>\n\n            <DrawerMenu\n                dispatch={dispatch}\n                isOpen={drawerIsOpen}\n                setIsOpen={setDrawerIsOpen}\n            />\n\n            <Container\n                style={{\n                    height: 'calc(100vh - 64px)',\n                    maxHeight: 'calc(100vh - 64px)',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    padding: '3em 0 1em'\n                }}\n            >\n                <Grid\n                    container\n                    direction=\"column\"\n                    spacing={2}\n                    style={{ flex: 1 }}\n                >\n                    {Object.entries(state.celeries).map(\n                        ([id, celery], index) => (\n                            <Grid item key={id}>\n                                <Grow in>\n                                    <Paper>\n                                        <CeleryBox\n                                            key={id}\n                                            index={index}\n                                            id={id}\n                                            dispatch={dispatch}\n                                            {...celery}\n                                        />\n                                    </Paper>\n                                </Grow>\n                            </Grid>\n                        )\n                    )}\n\n                    <Grid item>\n                        <Button\n                            size=\"large\"\n                            color=\"primary\"\n                            onClick={() =>\n                                dispatch({ type: ActionType.AddCelery })\n                            }\n                            endIcon={<AddCircleOutline />}\n                        >\n                            Add New\n                        </Button>\n                    </Grid>\n                </Grid>\n\n                <Grid item>\n                    <Grid container spacing={2} style={{ marginTop: '3em' }}>\n                        <Grid item>\n                            <Typography variant=\"h6\" color=\"textSecondary\">\n                                &nbsp;$&nbsp;\n                            </Typography>\n                        </Grid>\n\n                        <Grid item style={{ flex: 1 }}>\n                            <StyledSlider\n                                color=\"secondary\"\n                                track={false}\n                                min={Math.min(state.min, ...salaries)}\n                                max={Math.max(state.desired, ...salaries)}\n                                value={salaries}\n                                valueLabelFormat={formatMoney}\n                                marks={[\n                                    {\n                                        label: `Min.\n                                        (${formatMoney(state.min)})`,\n                                        value: state.min\n                                    },\n                                    {\n                                        label: `Des.\n                                        (${formatMoney(state.desired)})`,\n                                        value: state.desired\n                                    }\n                                ]}\n                                valueLabelDisplay=\"on\"\n                            />\n                        </Grid>\n\n                        <Grid item>\n                            <Typography variant=\"h6\" color=\"textSecondary\">\n                                $$$\n                            </Typography>\n                        </Grid>\n                    </Grid>\n\n                    <br />\n                    <br />\n\n                    {/* TODO: Move this stuff elsewhere */}\n                    <Grid container justify=\"space-between\">\n                        <Grid item>\n                            <NumberField\n                                name=\"min\"\n                                label=\"Minimum Salary\"\n                                onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>\n                                ) => {\n                                    dispatch({\n                                        type: ActionType.SetMin,\n                                        payload: {\n                                            data: e.target.value\n                                        }\n                                    });\n                                }}\n                                value={state.min}\n                                placeholder=\"0.00\"\n                                autoStretch\n                            />\n                        </Grid>\n                        <Grid item>\n                            <NumberField\n                                name=\"desired\"\n                                label=\"Desired Salary\"\n                                onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>\n                                ) => {\n                                    dispatch({\n                                        type: ActionType.SetDesired,\n                                        payload: {\n                                            data: Number(e.target.value)\n                                        }\n                                    });\n                                }}\n                                value={state.desired}\n                                placeholder=\"0.00\"\n                                reversed\n                                autoStretch\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Container>\n\n            <Snackbar\n                open={restored}\n                autoHideDuration={4000}\n                onClose={() => setRestored(false)}\n            >\n                <Alert variant=\"filled\" severity=\"success\">\n                    Restored from Local Storage!\n                </Alert>\n            </Snackbar>\n        </Layout>\n    );\n};\n\nexport default process.env.NODE_ENV === 'development' ? hot(App) : App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {\n    ThemeProvider as MuiThemeProvider,\n    createMuiTheme,\n    responsiveFontSizes\n} from '@material-ui/core/styles';\nimport { ThemeProvider } from 'styled-components';\n\n// A custom theme for this app\nlet theme = createMuiTheme({\n    palette: {\n        common: { black: 'rgba(0, 0, 0, 1)', white: '#fff' },\n        background: {\n            paper: 'rgba(255, 255, 255, 1)',\n            default: 'rgba(239, 239, 239, 1)'\n        },\n        primary: {\n            light: 'rgba(175, 238, 107, 1)',\n            main: 'rgba(97, 186, 0, 1)',\n            dark: 'rgba(65, 117, 5, 1)',\n            contrastText: '#fff'\n        },\n        secondary: {\n            light: 'rgba(175, 238, 107, 1)',\n            main: 'rgba(97, 186, 0, 1)',\n            dark: 'rgba(65, 117, 5, 1)',\n            contrastText: '#fff'\n        },\n        error: {\n            light: '#e57373',\n            main: '#f44336',\n            dark: '#d32f2f',\n            contrastText: '#fff'\n        },\n        text: {\n            primary: 'rgba(59, 59, 59, 0.87)',\n            secondary: 'rgba(73, 73, 73, 0.6)',\n            disabled: 'rgba(0, 0, 0, 0.38)',\n            hint: 'rgba(0, 0, 0, 0.38)'\n        }\n    }\n});\n\ntheme = responsiveFontSizes(theme);\n\nReactDOM.render(\n    <MuiThemeProvider theme={theme}>\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <App />\n        </ThemeProvider>\n    </MuiThemeProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}