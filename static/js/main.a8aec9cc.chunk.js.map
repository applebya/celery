{"version":3,"sources":["components/CeleryIcon.svg","store/types.ts","utils/calculateSalary.ts","components/NumberField.tsx","services/types.ts","components/FlagImage.tsx","components/CurrencySelect.tsx","components/CeleryBox.tsx","store/reducer.ts","components/DrawerMenu.tsx","components/WizardDialog.tsx","utils/formatMoney.ts","components/App.tsx","services/fetchCurrencyRates.ts","serviceWorker.js","theme.ts","GlobalStyle.ts","index.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","MeasurementType","ActionType","createElement","d","_ref","svgRef","title","props","id","x","y","viewBox","style","enableBackground","xmlSpace","ref","ForwardRef","forwardRef","value","valueType","factor","hoursInDay","daysInWeek","vacationDays","holidayDays","fullTime","outputType","PerYear","Number","workingDaysInYear","Math","max","workingDaysInMonth","PerHour","PerDay","PerMonth","CurrencyType","NumberFormatCustom","inputRef","onChange","rest","getInputRef","onValueChange","val","floatValue","thousandSeparator","isNumericString","placeholder","NumberField","styled","reversed","autoStretch","InputProps","TextField","inputComponent","FlagImage","currencyCode","src","toLowerCase","alt","StyledSelect","Select","CurrencySelect","values","map","MenuItem","StyledTextField","usePrevious","useRef","useEffect","current","StyledSwitch","Switch","checked","CeleryBox","name","index","input","type","currency","commitment","ratings","ratingTypes","defaults","baseCurrency","rateFactor","dispatch","defaultValues","settings","salary","calculateSalary","prevSalary","monthly","prevMonthly","daily","prevDaily","hourly","prevHourly","Box","padding","Grid","container","spacing","item","sm","xs","color","marginBottom","fullWidth","autoFocus","autoComplete","event","SetName","payload","data","endAdornment","InputAdornment","position","FormControlLabel","label","control","size","e","SetCommitmentValue","subID","variant","SetInputValue","startAdornment","SetInputMeasurement","SetInputCurrency","display","justifyContent","alignItems","entries","filter","ratingID","md","Typography","component","Rating","precision","SetRating","maxWidth","start","end","prefix","decimals","duration","separator","Button","onClick","RemoveCelery","Delete","defaultCurrency","USD","newCelery","uuid","defaultState","min","desired","celeries","timestamp","currencies","base","partTime","persistedStore","window","localStorage","getItem","initialState","JSON","parse","reducer","state","action","console","warn","SetRatingTypeName","AddRatingType","DeleteRatingType","undefined","SetStore","SetCurrencies","SetBaseCurrency","rates","previousBaseCurrency","newRates","reduce","acc","SetMin","SetDesired","AddCelery","ResetStore","removeItem","reduceStore","Date","setItem","stringify","StyledDrawer","Drawer","DrawerMenu","isOpen","setIsOpen","date","useState","modalIsOpen","setResetModalIsOpen","currenciesIsOpen","setCurrenciesIsOpen","ratingsIsOpen","setRatingsIsOpen","anchor","open","ListItem","divider","IconButton","Close","ListItemText","FormControl","InputLabel","button","ListItemIcon","Star","primary","ExpandLess","ExpandMore","Collapse","in","List","marginLeft","paddingBottom","AccountBalance","secondary","secondaryTypographyProps","align","toFixed","DeleteForever","Dialog","DialogTitle","DialogContent","dividers","DialogActions","StyledFormGroup","FormGroup","StyledNumberField","Chips","WizardDialog","wizardIsOpen","setWizardIsOpen","activeStep","setActiveStep","customRating","setCustomRating","isFinalStep","onClose","disableBackdropClick","disableEscapeKeyDown","PaperProps","width","Stepper","alternativeLabel","Step","StepLabel","Divider","textAlign","FormLabel","htmlFor","endIcon","Add","disabled","Chip","avatar","onDelete","format","stringValue","floor","Layout","div","TopNav","Toolbar","StyledSlider","Slider","StyledBackdrop","Backdrop","theme","zIndex","drawer","process","useReducer","restored","setRestored","drawerIsOpen","setDrawerIsOpen","a","async","fetch","querystring","request","json","error","fetchCurrencyRates","restoreLatestLocalStorage","addEventListener","removeEventListener","salaries","AppBar","Menu","fontWeight","SvgIcon","verticalAlign","Container","height","maxHeight","flexDirection","direction","flex","celery","Grow","Paper","marginTop","track","valueLabelFormat","formatMoney","marks","valueLabelDisplay","Tooltip","placement","Fab","top","right","Snackbar","autoHideDuration","Alert","severity","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","createMuiTheme","palette","common","black","white","background","paper","default","light","main","dark","contrastText","text","hint","responsiveFontSizes","GlobalStyle","createGlobalStyle","p","ReactDOM","render","CssBaseline","document","getElementById","URL","href","origin","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a8aec9cc.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", null, React.createElement(\"g\", null, React.createElement(\"path\", {\n  d: \"M511.996,245.866l-65.059-39.121l8.529-22.822l-0.071-0.027c5.41-3.978,10.784-8.645,16.179-14.042l17.831-17.838 l-61.131-22.201l10.7-57.672l-57.637,10.718l-22.214-61.122l-17.831,17.817c-4.269,4.266-10.384,10.383-16.226,18.151 l-19.794,7.368L266.131,0l-22.346,54.127l-58.118-40.495l4.805,37.372c2.188,17.059,4.818,37.564,13.533,56.35L42.408,268.951 c-25.364,25.355-39.493,52.092-41.996,79.47c-3.281,35.896,13.207,72.247,48.96,107.997l6.16,6.176 c32.824,32.821,66.109,49.407,99.087,49.405c2.988-0.001,5.979-0.137,8.961-0.41c27.373-2.504,54.113-16.631,79.477-41.992 l161.594-161.592c18.855,8.758,39.436,11.369,56.557,13.541l37.12,4.718l-40.463-58.056L511.996,245.866z M32.395,351.344 c1.801-19.698,12.808-39.778,32.719-59.682L244.38,112.4l-7.041-10.897c-3.616-5.597-6.272-11.887-8.302-18.509l29.183,20.334 l13.262-32.124l20.013,33.27l16.595-6.177c-0.563,5.883-0.377,12.097,0.85,18.637c-31.588,31.555-168.455,168.281-192.748,192.582 c-28.354,28.346-52.132,72.703-47.215,121.021C42.421,402.95,30.113,376.323,32.395,351.344z M104.359,389.927 c8.357-29.268,26.938-50.101,34.542-57.703c27.356-27.362,197.513-197.342,199.228-199.055l7.051-7.043l-3.182-9.445 c-4.189-12.437-1.721-23.362,5.044-34.161l13.408,36.893l38.416-7.144l-7.133,38.441l35.818,13.008 c-10.452,5.542-22.819,8.119-36.741,2.839l-9.701-3.677l-7.34,7.332c-1.727,1.725-173.004,172.808-200.381,200.185 c-8.242,8.242-35.576,32.797-72.546,37.694C101.446,402.082,102.618,396.024,104.359,389.927z M429.013,282.979 c-6.614-2.029-12.901-4.687-18.494-8.306l-10.899-7.054l-179.271,179.27c-34.696,34.691-68.864,41.999-105.341,21.79 c-5.523-9.315-9.501-18.828-11.898-28.511c47.973-5.68,82.632-36.702,92.988-47.057c24.237-24.238,161.307-161.156,193.577-193.39 c8.361,1.938,16.745,2.383,25.102,1.338l-7.269,19.45l33.272,20.008l-32.121,13.259L429.013,282.979z\"\n})));\n\nvar SvgCeleryIcon = function SvgCeleryIcon(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 512 512\",\n    style: {\n      enableBackground: \"new 0 0 512 512\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgCeleryIcon, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/CeleryIcon.8ccebf47.svg\";\nexport { ForwardRef as ReactComponent };","import { DeepReadonly } from 'ts-essentials';\nimport { CurrencyType } from '../services/types';\n\n// Deeply immutable state\nexport type State = DeepReadonly<{\n    timestamp: number;\n    min: number;\n    desired: number;\n    celeries: {\n        [x: string]: Celery;\n    };\n    currencies: Currencies;\n    defaults: {\n        fullTime: Commitment;\n        partTime: Commitment;\n    };\n    ratingTypes: {\n        [x: string]: string;\n    };\n    // TODO:\n    // settings: {\n    //     commitmentType: CommitmentType,\n    //     multipleCurrencies: boolean;\n    // };\n}>;\n\nexport type Celery = {\n    name: string;\n    input: {\n        value: number | null;\n        type: MeasurementType;\n        currency: CurrencyType | null;\n    };\n    // TODO: Consolidate with Commitment type\n    commitment: {\n        fullTime: boolean;\n        hoursInDay: number | null;\n        daysInWeek: number | null;\n        vacationDays: number | null;\n        holidayDays: number | null;\n    };\n    ratings: {\n        [x: string]: number;\n    };\n};\n\nexport type Currencies = {\n    base: CurrencyType;\n    date?: string;\n    rates?: {\n        [x: string]: CurrencyType;\n    };\n};\n\nexport type Commitment = {\n    hoursInDay: number;\n    daysInWeek: number;\n    vacationDays: number;\n    holidayDays: number;\n};\n\nexport enum MeasurementType {\n    PerHour = '/hour',\n    PerDay = '/day',\n    PerMonth = '/month',\n    PerYear = '/year'\n}\n\n// TODO: Change to standard UPPER_CASE\nexport enum ActionType {\n    AddCelery = 'addCelery',\n    RemoveCelery = 'removeCelery',\n    SetInputValue = 'setInputValue',\n    SetInputMeasurement = 'setInputMeasurement',\n    SetInputCurrency = 'setInputCurrency',\n    SetCommitmentValue = 'setCommitmentValue',\n    SetRating = 'setRating',\n    SetRatingTypeName = 'setRatingTypeName',\n    AddRatingType = 'addRatingType',\n    DeleteRatingType = 'deleteRatingType',\n    SetName = 'setName',\n    SetMin = 'setMin',\n    SetDesired = 'setDesired',\n    SetStore = 'setStore',\n    ResetStore = 'resetStore',\n    SetCurrencies = 'setCurrencies',\n    SetBaseCurrency = 'setBaseCurrency'\n}\n\nexport type Dispatch = React.Dispatch<Action>;\n\n// Loose typing, to avoid creating a type for every ActionType\n// TODO: Maybe a type for every ActionType... IS better?\nexport type Action = {\n    type: ActionType;\n    payload?: {\n        id?: string;\n        subID?: string;\n        data?: any;\n    };\n    meta?: any;\n};\n","import { MeasurementType } from '../store/types';\n\ninterface CalculateSalaryProps {\n    value: number | null;\n    valueType: MeasurementType;\n    factor?: number;\n    hoursInDay: number;\n    daysInWeek: number;\n    vacationDays: number;\n    holidayDays: number;\n    fullTime: boolean;\n    outputType?: MeasurementType;\n}\n\n// TODO: Test this util\n\n/** Returns a yearly salary given the input type */\nexport default function({\n    value,\n    valueType,\n    factor,\n    hoursInDay,\n    daysInWeek,\n    vacationDays,\n    holidayDays,\n    fullTime,\n    outputType = MeasurementType.PerYear\n}: CalculateSalaryProps): number {\n    if (!value) return 0;\n\n    // TODO: Fix to number only\n    if (typeof value === 'string') {\n        value = Number(value);\n    }\n\n    if (factor) {\n        value = value / factor;\n    }\n\n    let workingDaysInYear = 52 * daysInWeek;\n\n    if (fullTime) {\n        // You get paid days off!\n        workingDaysInYear = Math.max(\n            workingDaysInYear - vacationDays - holidayDays,\n            0\n        );\n    }\n\n    const workingDaysInMonth = workingDaysInYear / 12;\n\n    switch (valueType) {\n        case MeasurementType.PerHour:\n            switch (outputType) {\n                case MeasurementType.PerDay:\n                    return value * hoursInDay;\n\n                case MeasurementType.PerMonth:\n                    return value * hoursInDay * workingDaysInMonth;\n\n                case MeasurementType.PerYear:\n                    return value * hoursInDay * workingDaysInMonth * 12;\n\n                default:\n                    return value;\n            }\n\n        case MeasurementType.PerDay:\n            switch (outputType) {\n                case MeasurementType.PerHour:\n                    return value / hoursInDay;\n\n                case MeasurementType.PerMonth:\n                    return value * workingDaysInMonth;\n\n                case MeasurementType.PerYear:\n                    return value * workingDaysInMonth * 12;\n\n                default:\n                    return value;\n            }\n\n        case MeasurementType.PerMonth:\n            switch (outputType) {\n                case MeasurementType.PerHour:\n                    return value / workingDaysInMonth / hoursInDay;\n\n                case MeasurementType.PerDay:\n                    return value / workingDaysInMonth;\n\n                case MeasurementType.PerYear:\n                    return value * 12;\n\n                default:\n                    return value;\n            }\n\n        case MeasurementType.PerYear:\n            switch (outputType) {\n                case MeasurementType.PerHour:\n                    return value / 12 / workingDaysInMonth / hoursInDay;\n\n                case MeasurementType.PerDay:\n                    return value / 12 / workingDaysInMonth;\n\n                case MeasurementType.PerMonth:\n                    return value / 12;\n\n                default:\n                    return value;\n            }\n\n        default:\n            return value;\n    }\n}\n","import React from 'react';\nimport NumberFormat from 'react-number-format';\nimport { TextField, TextFieldProps } from '@material-ui/core';\nimport styled from 'styled-components';\n\ninterface Props {\n    inputRef: (instance: NumberFormat | null) => void;\n    onChange: (event: { target: { value: number | null } }) => void;\n    reversed?: boolean;\n}\n\nconst NumberFormatCustom: React.FC<Props> = ({\n    inputRef,\n    onChange,\n    ...rest\n}) => (\n    <NumberFormat\n        getInputRef={inputRef}\n        onValueChange={val => {\n            onChange({\n                target: {\n                    value: val.floatValue || null\n                }\n            });\n        }}\n        thousandSeparator\n        isNumericString\n        placeholder=\"0\"\n        {...rest}\n    />\n);\n\n// TODO: Fix NumberField to type with these props\ntype NumberFieldProps = TextFieldProps & {\n    reversed?: boolean;\n    autoStretch?: boolean;\n};\n\nconst NumberField = styled(\n    ({ reversed, autoStretch, InputProps, ...props }) => (\n        <TextField\n            InputProps={{\n                inputComponent: NumberFormatCustom as any,\n                ...InputProps\n            }}\n            {...props}\n        />\n    )\n)``;\n\nexport default NumberField;\n","export enum CurrencyType {\n    AUD = 'AUD',\n    BGN = 'BGN',\n    BRL = 'BRL',\n    CAD = 'CAD',\n    CHF = 'CHF',\n    CNY = 'CNY',\n    CZK = 'CZK',\n    DKK = 'DKK',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    HKD = 'HKD',\n    HRK = 'HRK',\n    HUF = 'HUF',\n    IDR = 'IDR',\n    ILS = 'ILS',\n    INR = 'INR',\n    ISK = 'ISK',\n    JPY = 'JPY',\n    KRW = 'KRW',\n    MXN = 'MXN',\n    MYR = 'MYR',\n    NOK = 'NOK',\n    NZD = 'NZD',\n    PHP = 'PHP',\n    PLN = 'PLN',\n    RON = 'RON',\n    RUB = 'RUB',\n    SEK = 'SEK',\n    SGD = 'SGD',\n    THB = 'THB',\n    TRY = 'TRY',\n    USD = 'USD',\n    ZAR = 'ZAR'\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { CurrencyType } from '../services/types';\n\ninterface Props {\n    currencyCode: CurrencyType;\n}\n\nconst FlagImage = styled(({ currencyCode = '', ...rest }) => (\n    <img\n        src={`./flags/${currencyCode.toLowerCase()}.png`}\n        alt={currencyCode}\n        {...rest}\n    />\n))<Props>`\n    height: 12px;\n    margin-right: 8px;\n`;\n\nexport default FlagImage;\n","import React from 'react';\nimport { Select, MenuItem, SelectProps } from '@material-ui/core';\nimport styled from 'styled-components';\nimport { CurrencyType } from '../services/types';\nimport FlagImage from './FlagImage';\n\nconst StyledSelect = styled(Select)`\n    max-width: 7em;\n`;\n\n// TODO: Group currencies by continent?\nconst CurrencySelect: React.FC<SelectProps> = props => (\n    <StyledSelect {...props}>\n        {Object.values(CurrencyType).map(currencyCode => (\n            <MenuItem key={currencyCode} value={currencyCode}>\n                <FlagImage currencyCode={currencyCode} />\n                {currencyCode}\n            </MenuItem>\n        ))}\n    </StyledSelect>\n);\n\nexport default CurrencySelect;\n","import React, { useEffect, useRef } from 'react';\nimport {\n    Box,\n    Button,\n    Grid,\n    TextField,\n    Select,\n    MenuItem,\n    InputAdornment,\n    FormControlLabel,\n    Switch,\n    Typography\n} from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport CountUp from 'react-countup';\nimport calculateSalary from '../utils/calculateSalary';\nimport NumberField from './NumberField';\nimport styled from 'styled-components';\nimport {\n    ActionType,\n    Celery,\n    MeasurementType,\n    Dispatch,\n    Commitment\n} from '../store/types';\nimport CurrencySelect from './CurrencySelect';\nimport { CurrencyType } from '../services/types';\nimport { Rating } from '@material-ui/lab';\n\ninterface CeleryBoxProps extends Celery {\n    id: string;\n    dispatch: Dispatch;\n    index: number;\n    rateFactor?: number;\n    baseCurrency: CurrencyType;\n    defaults: {\n        fullTime: Commitment;\n        partTime: Commitment;\n    };\n    ratings: { [x: string]: number };\n    ratingTypes: { [x: string]: string };\n}\n\nconst StyledTextField = styled(TextField)`\n    input {\n        font-size: 1.5em;\n    }\n`;\n\nconst usePrevious = <T extends {}>(value: T) => {\n    const ref = useRef<T>();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n};\n\nconst StyledSwitch = styled(Switch)`\n    ${({ checked }) =>\n        !checked &&\n        `\n            .MuiIconButton-label {\n                color: #00a0ff;\n            }\n            .MuiSwitch-track {\n                background: #00a0ff;\n            }\n    `}\n`;\n\nconst CeleryBox: React.FC<CeleryBoxProps> = ({\n    id,\n    name,\n    index,\n    // TODO: Pass entire state, or use context/hooks\n    input: { value, type, currency },\n    commitment: { fullTime, hoursInDay, daysInWeek, vacationDays, holidayDays },\n    ratings,\n    ratingTypes,\n    defaults,\n    baseCurrency,\n    rateFactor,\n    dispatch\n}) => {\n    const defaultValues = defaults[fullTime ? 'fullTime' : 'partTime'];\n\n    const settings = {\n        value,\n        valueType: type,\n        factor: rateFactor,\n        fullTime,\n        hoursInDay: hoursInDay || defaultValues.hoursInDay,\n        daysInWeek: daysInWeek || defaultValues.daysInWeek,\n        vacationDays: vacationDays || defaultValues.vacationDays,\n        holidayDays: holidayDays || defaultValues.holidayDays\n    };\n\n    // TODO: Move into memoized component\n    const salary = calculateSalary({\n        ...settings,\n        outputType: MeasurementType.PerYear\n    });\n    const prevSalary = usePrevious(salary);\n\n    const monthly = calculateSalary({\n        ...settings,\n        outputType: MeasurementType.PerMonth\n    });\n    const prevMonthly = usePrevious(monthly);\n\n    const daily = calculateSalary({\n        ...settings,\n        outputType: MeasurementType.PerDay\n    });\n    const prevDaily = usePrevious(daily);\n\n    const hourly = calculateSalary({\n        ...settings,\n        outputType: MeasurementType.PerHour\n    });\n    const prevHourly = usePrevious(hourly);\n\n    return (\n        <Box style={{ padding: '1em' }}>\n            <Grid container spacing={3}>\n                <Grid item sm={3} xs={12}>\n                    <StyledTextField\n                        name=\"name\"\n                        placeholder={`Company ${index + 1}`}\n                        color=\"secondary\"\n                        value={name}\n                        style={{\n                            marginBottom: 15\n                        }}\n                        fullWidth\n                        autoFocus\n                        autoComplete=\"off\"\n                        onChange={(\n                            event: React.ChangeEvent<HTMLInputElement>\n                        ) => {\n                            dispatch({\n                                type: ActionType.SetName,\n                                payload: {\n                                    id,\n                                    data: event.target.value\n                                }\n                            });\n                        }}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <FormControlLabel\n                                        label={\n                                            fullTime ? 'Full-Time' : 'Part-Time'\n                                        }\n                                        control={\n                                            <StyledSwitch\n                                                size=\"small\"\n                                                checked={fullTime}\n                                                onChange={(\n                                                    e: React.ChangeEvent<\n                                                        HTMLInputElement\n                                                    >\n                                                ) => {\n                                                    dispatch({\n                                                        type:\n                                                            ActionType.SetCommitmentValue,\n                                                        payload: {\n                                                            id,\n                                                            subID: 'fullTime',\n                                                            data:\n                                                                e.target.checked\n                                                        }\n                                                    });\n                                                }}\n                                            />\n                                        }\n                                    />\n                                </InputAdornment>\n                            )\n                        }}\n                    />\n                    <NumberField\n                        name=\"value\"\n                        variant=\"outlined\"\n                        autoComplete=\"off\"\n                        // TODO: Show 'default' option to use base\n                        value={value}\n                        onChange={(\n                            event: React.ChangeEvent<HTMLInputElement>\n                        ) => {\n                            dispatch({\n                                type: ActionType.SetInputValue,\n                                payload: {\n                                    id,\n                                    data: event.target.value\n                                }\n                            });\n                        }}\n                        placeholder=\"0.00\"\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    $\n                                </InputAdornment>\n                            ),\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <Select\n                                        value={type}\n                                        onChange={(\n                                            e: React.ChangeEvent<{\n                                                value: unknown;\n                                            }>\n                                        ) => {\n                                            dispatch({\n                                                type:\n                                                    ActionType.SetInputMeasurement,\n                                                payload: {\n                                                    id,\n                                                    data: e.target.value\n                                                }\n                                            });\n                                        }}\n                                    >\n                                        {Object.values(MeasurementType).map(\n                                            type => (\n                                                <MenuItem\n                                                    key={type}\n                                                    value={type}\n                                                >\n                                                    {type}\n                                                </MenuItem>\n                                            )\n                                        )}\n                                    </Select>\n                                    <CurrencySelect\n                                        value={currency || baseCurrency}\n                                        onChange={(\n                                            e: React.ChangeEvent<{\n                                                value: unknown;\n                                            }>\n                                        ) => {\n                                            dispatch({\n                                                type:\n                                                    ActionType.SetInputCurrency,\n                                                payload: {\n                                                    id,\n                                                    data: e.target.value\n                                                }\n                                            });\n                                        }}\n                                    />\n                                </InputAdornment>\n                            )\n                        }}\n                    />\n                </Grid>\n                <Grid\n                    item\n                    sm={3}\n                    xs={12}\n                    style={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        alignItems: ''\n                    }}\n                >\n                    <Grid container spacing={2}>\n                        {Object.entries(ratingTypes)\n                            .filter(([ratingID, name]) => name.length)\n                            .map(([ratingID, name]) => (\n                                <Grid item md={6} sm={12} key={ratingID}>\n                                    <Typography\n                                        component=\"legend\"\n                                        variant=\"caption\"\n                                    >\n                                        {name}\n                                    </Typography>\n                                    <Rating\n                                        size=\"small\"\n                                        value={ratings[ratingID] || 0}\n                                        precision={0.5}\n                                        onChange={(\n                                            e: React.ChangeEvent<{}>,\n                                            value: number | null\n                                        ) => {\n                                            dispatch({\n                                                type: ActionType.SetRating,\n                                                payload: {\n                                                    id,\n                                                    subID: ratingID,\n                                                    data: value || 0\n                                                }\n                                            });\n                                        }}\n                                    />\n                                </Grid>\n                            ))}\n                    </Grid>\n                </Grid>\n                <Grid\n                    item\n                    sm={3}\n                    xs={12}\n                    style={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        alignItems: ''\n                    }}\n                >\n                    <Grid container spacing={2}>\n                        <Grid item sm={12} md={6}>\n                            <NumberField\n                                label=\"I work:\"\n                                style={{ maxWidth: 110 }}\n                                value={\n                                    hoursInDay !== null\n                                        ? hoursInDay\n                                        : defaultValues.hoursInDay\n                                }\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            {hoursInDay === 1\n                                                ? 'hour'\n                                                : 'hours'}\n                                            /day\n                                        </InputAdornment>\n                                    )\n                                }}\n                                onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>\n                                ) => {\n                                    // if (Number(e.target.value) > 24) return;\n\n                                    dispatch({\n                                        type: ActionType.SetCommitmentValue,\n                                        payload: {\n                                            id,\n                                            subID: 'hoursInDay',\n                                            data: e.target.value\n                                        }\n                                    });\n                                }}\n                            />\n                        </Grid>\n                        <Grid item sm={12} md={6}>\n                            <NumberField\n                                label=\"Within:\"\n                                style={{ maxWidth: 110 }}\n                                value={\n                                    daysInWeek !== null\n                                        ? daysInWeek\n                                        : defaultValues.daysInWeek\n                                }\n                                InputProps={{\n                                    max: 7,\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            {daysInWeek === 1 ? 'day' : 'days'}\n                                            /week\n                                        </InputAdornment>\n                                    )\n                                }}\n                                onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>\n                                ) => {\n                                    dispatch({\n                                        type: ActionType.SetCommitmentValue,\n                                        payload: {\n                                            id,\n                                            subID: 'daysInWeek',\n                                            data: e.target.value\n                                        }\n                                    });\n                                }}\n                            />\n                        </Grid>\n\n                        {fullTime && (\n                            <>\n                                <Grid item sm={12} md={6}>\n                                    <NumberField\n                                        label=\"Paid Vacation\"\n                                        style={{ maxWidth: 110 }}\n                                        value={\n                                            vacationDays !== null\n                                                ? vacationDays\n                                                : defaultValues.vacationDays\n                                        }\n                                        InputProps={{\n                                            max: 365, // TODO: Calculate remaining\n                                            endAdornment: (\n                                                <InputAdornment position=\"end\">\n                                                    {vacationDays === 1\n                                                        ? 'day'\n                                                        : 'days'}\n                                                    /year\n                                                </InputAdornment>\n                                            )\n                                        }}\n                                        onChange={(\n                                            e: React.ChangeEvent<\n                                                HTMLInputElement\n                                            >\n                                        ) => {\n                                            dispatch({\n                                                type:\n                                                    ActionType.SetCommitmentValue,\n                                                payload: {\n                                                    id,\n                                                    subID: 'vacationDays',\n                                                    data: e.target.value\n                                                }\n                                            });\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item sm={12} md={6}>\n                                    <NumberField\n                                        label={`Stat. Holiday${\n                                            (holidayDays ||\n                                                defaultValues.holidayDays) !== 1\n                                                ? 's'\n                                                : ''\n                                        }`}\n                                        value={\n                                            holidayDays !== null\n                                                ? holidayDays\n                                                : defaultValues.holidayDays\n                                        }\n                                        style={{ maxWidth: 110 }}\n                                        InputProps={{\n                                            max: 365, // TODO: Calculate remaining\n                                            endAdornment: (\n                                                <InputAdornment position=\"end\">\n                                                    {holidayDays === 1\n                                                        ? 'day'\n                                                        : 'days'}\n                                                    /year\n                                                </InputAdornment>\n                                            )\n                                        }}\n                                        onChange={(\n                                            e: React.ChangeEvent<\n                                                HTMLInputElement\n                                            >\n                                        ) => {\n                                            dispatch({\n                                                type:\n                                                    ActionType.SetCommitmentValue,\n                                                payload: {\n                                                    id,\n                                                    subID: 'holidayDays',\n                                                    data: e.target.value\n                                                }\n                                            });\n                                        }}\n                                    />\n                                </Grid>\n                            </>\n                        )}\n                    </Grid>\n                </Grid>\n                <Grid item sm={3} xs={12}>\n                    <Box>\n                        <strong>\n                            <CountUp\n                                start={prevSalary}\n                                end={salary}\n                                prefix=\"$\"\n                                decimals={0}\n                                duration={0.5}\n                                separator=\",\"\n                            />\n                        </strong>{' '}\n                        / year\n                    </Box>\n\n                    <Box>\n                        <strong>\n                            <CountUp\n                                start={prevMonthly}\n                                end={monthly}\n                                prefix=\"$\"\n                                decimals={0}\n                                duration={0.6}\n                                separator=\",\"\n                            />\n                        </strong>{' '}\n                        / month\n                    </Box>\n\n                    <Box>\n                        <strong>\n                            <CountUp\n                                start={prevDaily}\n                                end={daily}\n                                prefix=\"$\"\n                                decimals={2}\n                                duration={0.7}\n                                separator=\",\"\n                            />\n                        </strong>{' '}\n                        / day\n                    </Box>\n\n                    <Box>\n                        <strong>\n                            <CountUp\n                                start={prevHourly}\n                                end={hourly}\n                                prefix=\"$\"\n                                decimals={2}\n                                duration={0.8}\n                                separator=\",\"\n                            />\n                        </strong>{' '}\n                        / hour\n                    </Box>\n                    {/* )} */}\n\n                    <Box>\n                        <Button\n                            onClick={() =>\n                                dispatch({\n                                    type: ActionType.RemoveCelery,\n                                    payload: { id, data: null }\n                                })\n                            }\n                        >\n                            <Delete color=\"error\" />\n                        </Button>\n                    </Box>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n\nexport default CeleryBox;\n","import uuid from 'uuid';\nimport { Celery, State, MeasurementType, ActionType, Action } from './types';\nimport { CurrencyType } from '../services/types';\n\n// TODO: Predict from browser location?\nconst defaultCurrency: CurrencyType = CurrencyType.USD;\n\nconst newCelery = ({ currency } = { currency: null }) => ({\n    [uuid()]: {\n        name: '',\n        input: {\n            value: 0,\n            type: MeasurementType.PerYear,\n            currency\n        },\n        commitment: {\n            fullTime: true,\n            hoursInDay: null,\n            daysInWeek: null,\n            vacationDays: null,\n            holidayDays: null\n        },\n        ratings: {}\n    } as Celery\n});\n\nexport const initTimestamp = 0;\n\n// Grab initialState from persistedStore in localStorage (if exists)\nexport const defaultState: State = {\n    min: 25000,\n    desired: 75000,\n    celeries: {},\n    timestamp: initTimestamp,\n    currencies: {\n        base: defaultCurrency\n    },\n    defaults: {\n        fullTime: {\n            hoursInDay: 8,\n            daysInWeek: 5,\n            vacationDays: 0,\n            holidayDays: 0\n        },\n        partTime: {\n            hoursInDay: 3,\n            daysInWeek: 2,\n            vacationDays: 0,\n            holidayDays: 0\n        }\n    },\n    ratingTypes: {\n        [uuid()]: 'Culture',\n        [uuid()]: 'Work Life',\n        [uuid()]: 'Benefits',\n        [uuid()]: 'Likeability'\n    }\n    // TODO\n    // settings: {\n    //     commitmentType: CommitmentType.Both,\n    //     isInternational: false,\n    // }\n};\n\nconst PERSISTED_STORE_NAME = 'persistedStore';\n\nconst persistedStore = window.localStorage.getItem(PERSISTED_STORE_NAME);\n\n// TODO: Move this out, consolidate with useEffect in App.tsx\n// TODO: Deep-merge persistedStore into defaultState\nexport const initialState: State = persistedStore\n    ? JSON.parse(persistedStore)\n    : defaultState;\n\nconst reduceStore = (state: State, action: Action): State => {\n    const { type } = action;\n\n    if (action.payload) {\n        const { payload } = action;\n\n        if (payload.id) {\n            switch (type) {\n                case ActionType.RemoveCelery:\n                    const { [payload.id]: _, ...celeries } = state.celeries;\n\n                    return {\n                        ...state,\n                        celeries\n                    };\n\n                case ActionType.SetInputValue:\n                    return {\n                        ...state,\n                        celeries: {\n                            ...state.celeries,\n                            [payload.id]: {\n                                ...state.celeries[payload.id],\n                                input: {\n                                    ...state.celeries[payload.id].input,\n                                    value: payload.data\n                                }\n                            }\n                        }\n                    };\n\n                case ActionType.SetInputMeasurement:\n                    return {\n                        ...state,\n                        celeries: {\n                            ...state.celeries,\n                            [payload.id]: {\n                                ...state.celeries[payload.id],\n                                input: {\n                                    ...state.celeries[payload.id].input,\n                                    type: payload.data\n                                }\n                            }\n                        }\n                    };\n\n                case ActionType.SetInputCurrency:\n                    return {\n                        ...state,\n                        celeries: {\n                            ...state.celeries,\n                            [payload.id]: {\n                                ...state.celeries[payload.id],\n                                input: {\n                                    ...state.celeries[payload.id].input,\n                                    currency: payload.data\n                                }\n                            }\n                        }\n                    };\n\n                case ActionType.SetName:\n                    return {\n                        ...state,\n                        celeries: {\n                            ...state.celeries,\n                            [payload.id]: {\n                                ...state.celeries[payload.id],\n                                name: payload.data\n                            }\n                        }\n                    };\n\n                case ActionType.SetCommitmentValue:\n                    if (!payload.subID) {\n                        console.warn(`Missing subID (is: ${payload.subID})`);\n                        return state;\n                    }\n\n                    return {\n                        ...state,\n                        celeries: {\n                            ...state.celeries,\n                            [payload.id]: {\n                                ...state.celeries[payload.id],\n                                commitment: {\n                                    ...state.celeries[payload.id].commitment,\n                                    [payload.subID]: payload.data\n                                }\n                            }\n                        }\n                    };\n\n                case ActionType.SetRating:\n                    if (!payload.subID) {\n                        console.warn(`Missing subID (is: ${payload.subID})`);\n                        return state;\n                    }\n\n                    return {\n                        ...state,\n                        celeries: {\n                            ...state.celeries,\n                            [payload.id]: {\n                                ...state.celeries[payload.id],\n                                ratings: {\n                                    ...state.celeries[payload.id].ratings,\n                                    [payload.subID]: payload.data\n                                }\n                            }\n                        }\n                    };\n\n                case ActionType.SetRatingTypeName:\n                    return {\n                        ...state,\n                        ratingTypes: {\n                            ...state.ratingTypes,\n                            [payload.id]: payload.data\n                        }\n                    };\n\n                case ActionType.AddRatingType:\n                    return {\n                        ...state,\n                        ratingTypes: {\n                            ...state.ratingTypes,\n                            [payload.id]: payload.data\n                        }\n                    };\n\n                case ActionType.DeleteRatingType:\n                    if (!state.ratingTypes[payload.id]) {\n                        return state;\n                    }\n\n                    const {\n                        [payload.id]: __,\n                        ...ratingTypes\n                    } = state.ratingTypes;\n\n                    return {\n                        ...state,\n                        ratingTypes\n                    };\n            }\n        } else if (typeof payload.data !== undefined) {\n            switch (type) {\n                case ActionType.SetStore:\n                    return payload.data;\n\n                case ActionType.SetCurrencies:\n                    return {\n                        ...state,\n                        currencies: payload.data\n                    };\n\n                case ActionType.SetBaseCurrency:\n                    const { rates = {} } = state.currencies;\n\n                    const previousBaseCurrency = (rates[\n                        state.currencies.base\n                    ] as unknown) as number;\n\n                    const newBaseCurrency = (rates[\n                        payload.data\n                    ] as unknown) as number;\n\n                    // Re-proportion currency rates to new\n                    const factor = newBaseCurrency / previousBaseCurrency;\n\n                    const newRates = Object.values(rates).reduce(\n                        (acc, val) => ({ ...acc, [val]: Number(val) * factor }),\n                        {}\n                    );\n\n                    return {\n                        ...state,\n                        currencies: {\n                            ...state.currencies,\n                            base: payload.data,\n                            rates: newRates\n                        }\n                    };\n\n                case ActionType.SetMin:\n                    return {\n                        ...state,\n                        min: payload.data\n                    };\n\n                case ActionType.SetDesired:\n                    return {\n                        ...state,\n                        desired: payload.data\n                    };\n            }\n        }\n    }\n\n    switch (type) {\n        case ActionType.AddCelery:\n            return {\n                ...state,\n                celeries: {\n                    ...state.celeries,\n                    ...newCelery()\n                }\n            };\n\n        case ActionType.ResetStore:\n            if ('localStorage' in window) {\n                localStorage.removeItem(PERSISTED_STORE_NAME);\n            }\n\n            return defaultState;\n\n        default:\n            console.warn(\n                `Action ${type} did not alter the state! Are you missing a reducer, my friend?`\n            );\n            return state;\n    }\n};\n\nconst reducer = (state: State, action: Action): State => {\n    // Timestamp this new version of the state\n    state = {\n        ...state,\n        timestamp: +new Date()\n    };\n\n    if (process.env.NODE_ENV === 'development') {\n        console.log('-----------');\n        console.info('action:', action);\n    }\n\n    // Reduce state with dispatched action\n    state = reduceStore(state, action);\n\n    if (process.env.NODE_ENV === 'development') {\n        console.info('state', state);\n        console.log('-----------');\n    }\n\n    // Persist new state to localStorage\n    if ('localStorage' in window) {\n        localStorage.setItem(PERSISTED_STORE_NAME, JSON.stringify(state));\n    }\n\n    return state;\n};\n\nexport default reducer;\n","import React, { useState } from 'react';\nimport {\n    Drawer,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button,\n    Collapse,\n    IconButton,\n    InputLabel,\n    FormControl,\n    Typography,\n    InputAdornment,\n    TextField\n} from '@material-ui/core';\nimport {\n    DeleteForever,\n    ExpandLess,\n    ExpandMore,\n    Close,\n    // Settings,\n    AccountBalance,\n    Star\n} from '@material-ui/icons';\nimport { Dispatch, ActionType, Currencies } from '../store/types';\nimport styled from 'styled-components';\nimport { CurrencyType } from '../services/types';\nimport FlagImage from './FlagImage';\nimport NumberField from './NumberField';\nimport CurrencySelect from './CurrencySelect';\n\ninterface DrawerMenuProps {\n    dispatch: Dispatch;\n    isOpen: boolean;\n    setIsOpen: (a: boolean) => void;\n    currencies: Currencies;\n    min: number;\n    desired: number;\n    ratingTypes: {\n        [x: string]: string;\n    };\n}\n\nconst StyledDrawer = styled(Drawer)`\n    min-width: 300px;\n`;\n\nconst DrawerMenu: React.FC<DrawerMenuProps> = ({\n    dispatch,\n    isOpen,\n    setIsOpen,\n    currencies: { base, rates, date },\n    min,\n    desired,\n    ratingTypes\n}) => {\n    const [modalIsOpen, setResetModalIsOpen] = useState(false);\n    const [currenciesIsOpen, setCurrenciesIsOpen] = useState(false);\n    // const [settingsIsOpen, setSettingsIsOpen] = useState(false);\n    const [ratingsIsOpen, setRatingsIsOpen] = useState(false);\n\n    return (\n        <StyledDrawer anchor=\"left\" variant=\"persistent\" open={isOpen}>\n            <ListItem divider>\n                <IconButton onClick={() => setIsOpen(false)}>\n                    <Close />\n                </IconButton>\n                <ListItemText />\n                <FormControl>\n                    <InputLabel id=\"defaultCurrency\">Currency</InputLabel>\n                    <CurrencySelect\n                        value={base}\n                        onChange={e => {\n                            dispatch({\n                                type: ActionType.SetBaseCurrency,\n                                payload: { data: e.target.value }\n                            });\n                        }}\n                    />\n                </FormControl>\n            </ListItem>\n\n            <ListItem>\n                <ListItemText>\n                    <NumberField\n                        label=\"Minimum\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                            dispatch({\n                                type: ActionType.SetMin,\n                                payload: {\n                                    data: e.target.value\n                                }\n                            });\n                        }}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    $\n                                </InputAdornment>\n                            )\n                        }}\n                        value={min}\n                        autoFocus\n                    />\n                </ListItemText>\n            </ListItem>\n\n            <ListItem>\n                <NumberField\n                    label=\"Desired\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        dispatch({\n                            type: ActionType.SetDesired,\n                            payload: {\n                                data: Number(e.target.value)\n                            }\n                        });\n                    }}\n                    InputProps={{\n                        startAdornment: (\n                            <InputAdornment position=\"start\">$</InputAdornment>\n                        )\n                    }}\n                    value={desired}\n                />\n            </ListItem>\n\n            {/* <ListItem button onClick={() => setSettingsIsOpen(!settingsIsOpen)}>\n                <ListItemIcon>\n                    <Settings />\n                </ListItemIcon>\n                <ListItemText primary=\"Settings\" />\n                {settingsIsOpen ? <ExpandLess /> : <ExpandMore />}\n            </ListItem>\n            <Collapse in={settingsIsOpen}>\n                <List\n                    style={{\n                        marginLeft: '1em',\n                        paddingBottom: '2px'\n                    }}\n                >\n                </List>\n            </Collapse> */}\n\n            <ListItem button onClick={() => setRatingsIsOpen(!ratingsIsOpen)}>\n                <ListItemIcon>\n                    <Star />\n                </ListItemIcon>\n                <ListItemText primary=\"Ratings\" />\n                {ratingsIsOpen ? <ExpandLess /> : <ExpandMore />}\n            </ListItem>\n            <Collapse in={ratingsIsOpen}>\n                <List\n                    style={{\n                        marginLeft: '1em',\n                        paddingBottom: '2px'\n                    }}\n                >\n                    {Object.entries(ratingTypes).map(\n                        ([ratingID, name], index) => (\n                            <ListItem key={ratingID}>\n                                <TextField\n                                    label={`Rating ${index + 1}`}\n                                    placeholder=\"Enter a Rating\"\n                                    value={name}\n                                    onChange={e => {\n                                        dispatch({\n                                            type: ActionType.SetRatingTypeName,\n                                            payload: {\n                                                id: ratingID,\n                                                data: e.target.value\n                                            }\n                                        });\n                                    }}\n                                />\n                            </ListItem>\n                        )\n                    )}\n                </List>\n            </Collapse>\n\n            <ListItem\n                button\n                onClick={() => setCurrenciesIsOpen(!currenciesIsOpen)}\n            >\n                <ListItemIcon>\n                    <AccountBalance />\n                </ListItemIcon>\n                <ListItemText\n                    primary=\"Exchange\"\n                    secondary={currenciesIsOpen ? `($1 ${base})` : undefined}\n                    secondaryTypographyProps={{\n                        variant: 'caption',\n                        display: 'block'\n                    }}\n                />\n                {currenciesIsOpen ? <ExpandLess /> : <ExpandMore />}\n            </ListItem>\n            <Collapse in={currenciesIsOpen}>\n                <Typography align=\"center\" variant=\"caption\" display=\"block\">\n                    Updated: {date}\n                </Typography>\n                <List>\n                    {Object.values(CurrencyType)\n                        .filter(currency => currency !== base)\n                        .map(currency => (\n                            <ListItem key={currency}>\n                                <ListItemIcon>\n                                    <FlagImage currencyCode={currency} />\n                                </ListItemIcon>\n                                <ListItemText\n                                    primary={currency}\n                                    {...(rates\n                                        ? {\n                                              secondary: Number(\n                                                  rates[currency]\n                                              ).toFixed(3)\n                                          }\n                                        : {})}\n                                    secondaryTypographyProps={{\n                                        variant: 'caption',\n                                        style: {\n                                            marginLeft: 10\n                                        }\n                                    }}\n                                />\n                            </ListItem>\n                        ))}\n                </List>\n            </Collapse>\n\n            <ListItem button onClick={() => setResetModalIsOpen(true)}>\n                <ListItemIcon>\n                    <DeleteForever />\n                </ListItemIcon>\n                <ListItemText primary=\"Reset Data\" />\n            </ListItem>\n\n            <Dialog open={modalIsOpen}>\n                <DialogTitle>\n                    <DeleteForever /> Reset Database\n                </DialogTitle>\n                <DialogContent dividers>\n                    Are you sure you want to completely reset your database, and\n                    start over?\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        autoFocus\n                        onClick={() => setResetModalIsOpen(false)}\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            dispatch({\n                                type: ActionType.ResetStore\n                            });\n                            setResetModalIsOpen(false);\n                            setIsOpen(false);\n                        }}\n                        color=\"primary\"\n                    >\n                        Reset\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </StyledDrawer>\n    );\n};\n\nexport default DrawerMenu;\n","import React, { useState } from 'react';\nimport {\n    Dialog,\n    Button,\n    DialogTitle,\n    DialogContent,\n    Stepper,\n    Step,\n    StepLabel,\n    DialogActions,\n    Divider,\n    Typography,\n    InputAdornment,\n    FormLabel,\n    FormGroup,\n    TextField,\n    Grid,\n    Chip,\n    Box\n} from '@material-ui/core';\nimport uuid from 'uuid';\nimport styled from 'styled-components';\nimport { State, Dispatch, ActionType } from '../store/types';\nimport NumberField from './NumberField';\nimport CurrencySelect from './CurrencySelect';\nimport { Add, Star } from '@material-ui/icons';\n\ninterface Props extends State {\n    dispatch: Dispatch;\n}\n\nconst StyledFormGroup = styled(FormGroup)`\n    margin: 1.75em 0 0.5em;\n\n    :first-of-type {\n        margin-top: 0;\n    }\n\n    label {\n        margin-bottom: 0.5em;\n    }\n`;\n\nconst StyledNumberField = styled(NumberField)`\n    max-width: 150px;\n`;\n\nconst Chips = styled(Box)`\n    display: flex;\n    flex-flow: wrap;\n    margin-top: 10px;\n\n    > * {\n        margin: 8px 8px 3px 0;\n    }\n`;\n\nconst WizardDialog: React.FunctionComponent<Props> = ({\n    celeries,\n    currencies,\n    min,\n    desired,\n    ratingTypes,\n    dispatch\n}) => {\n    const [wizardIsOpen, setWizardIsOpen] = useState(!celeries.length);\n    const [activeStep, setActiveStep] = useState(0);\n    const [customRating, setCustomRating] = useState('');\n    const isFinalStep = activeStep === 3;\n\n    return (\n        <Dialog\n            open={wizardIsOpen}\n            maxWidth=\"sm\"\n            onClose={() => setWizardIsOpen(false)}\n            disableBackdropClick={!isFinalStep}\n            disableEscapeKeyDown={!isFinalStep}\n            PaperProps={{\n                style: {\n                    width: 500\n                }\n            }}\n        >\n            {!isFinalStep && (\n                <Stepper\n                    activeStep={activeStep}\n                    alternativeLabel\n                    // style={{ paddingBottom: 10 }}\n                >\n                    <Step>\n                        <StepLabel>Welcome</StepLabel>\n                    </Step>\n                    <Step>\n                        <StepLabel>My Preferences</StepLabel>\n                    </Step>\n                    <Step>\n                        <StepLabel>Ratings</StepLabel>\n                    </Step>\n                </Stepper>\n            )}\n\n            <Divider />\n\n            {activeStep === 0 && (\n                <>\n                    <DialogTitle style={{ textAlign: 'center' }}>\n                        And so... The Hunt Begins\n                    </DialogTitle>\n                    <DialogContent>\n                        <strong>Welcome to Celery!</strong>\n                        <br />\n                        <br />\n                        Celery is a free/open-source tool that helps you track\n                        &amp; compare job opportunities - all in 1 convenient\n                        place. Hope you like it!\n                        <br />\n                        <br />\n                        To get started, let's learn a few details about your job\n                        hunt...\n                        <br />\n                        <br />\n                        <Typography variant=\"caption\" style={{ width: '75%' }}>\n                            <strong>Privacy Notice:</strong>\n                            <br />\n                            Celery stores all private data in your browser cache\n                            (on this device), and doesn't require an account. No\n                            evil stuff, promise 👿\n                        </Typography>\n                        <br />\n                        <br />\n                    </DialogContent>\n\n                    <DialogActions>\n                        <Button onClick={() => setWizardIsOpen(false)}>\n                            Skip Setup\n                        </Button>\n                        <Button\n                            onClick={() => {\n                                setActiveStep(1);\n                            }}\n                            color=\"primary\"\n                        >\n                            Ok, Let's Go!\n                        </Button>\n                    </DialogActions>\n                </>\n            )}\n\n            {activeStep === 1 && (\n                <>\n                    <DialogTitle style={{ textAlign: 'center' }}>\n                        Cool, let's get you set up\n                    </DialogTitle>\n                    <DialogContent>\n                        <StyledFormGroup>\n                            <FormLabel htmlFor=\"base\">\n                                First, select your base currency:\n                            </FormLabel>\n                            <CurrencySelect\n                                id=\"base\"\n                                value={currencies.base}\n                                onChange={e => {\n                                    dispatch({\n                                        type: ActionType.SetBaseCurrency,\n                                        payload: { data: e.target.value }\n                                    });\n                                }}\n                                autoFocus\n                            />\n                        </StyledFormGroup>\n\n                        {/* TODO: I am seeking opportunities in different currencies */}\n                        {/* TODO: What level of work commitment are you looking for? */}\n\n                        <StyledFormGroup>\n                            <FormLabel htmlFor=\"min\">\n                                What's the minimum salary you'd find acceptable?\n                            </FormLabel>\n                            <StyledNumberField\n                                id=\"min\"\n                                onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>\n                                ) => {\n                                    dispatch({\n                                        type: ActionType.SetMin,\n                                        payload: {\n                                            data: e.target.value\n                                        }\n                                    });\n                                }}\n                                InputProps={{\n                                    startAdornment: (\n                                        <InputAdornment position=\"start\">\n                                            $\n                                        </InputAdornment>\n                                    ),\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            /year\n                                        </InputAdornment>\n                                    )\n                                }}\n                                value={min}\n                            />\n                        </StyledFormGroup>\n                        <StyledFormGroup>\n                            <FormLabel htmlFor=\"desired\">\n                                And what's the salary you{' '}\n                                <strong>really desire</strong>?\n                            </FormLabel>\n                            <StyledNumberField\n                                id=\"desired\"\n                                value={desired}\n                                onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>\n                                ) => {\n                                    dispatch({\n                                        type: ActionType.SetDesired,\n                                        payload: {\n                                            data: Number(e.target.value)\n                                        }\n                                    });\n                                }}\n                                InputProps={{\n                                    startAdornment: (\n                                        <InputAdornment position=\"start\">\n                                            $\n                                        </InputAdornment>\n                                    ),\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            /year\n                                        </InputAdornment>\n                                    )\n                                }}\n                            />\n                        </StyledFormGroup>\n                    </DialogContent>\n\n                    <DialogActions>\n                        <Button onClick={() => setActiveStep(0)}>Back</Button>\n                        <Button\n                            onClick={() => {\n                                setActiveStep(2);\n                            }}\n                            color=\"primary\"\n                            autoFocus\n                        >\n                            Next\n                        </Button>\n                    </DialogActions>\n                </>\n            )}\n\n            {activeStep === 2 && (\n                <>\n                    <DialogTitle style={{ textAlign: 'center' }}>\n                        How do you rate job opportunities?\n                    </DialogTitle>\n                    <DialogContent>\n                        <strong>\n                            Rate your favourite qualities of each job\n                            opportunity, out of 5 stars.\n                        </strong>\n                        <br />\n                        <br />\n                        We've added a few suggestions to get you started:\n                        <br />\n                        <br />\n                        <StyledFormGroup>\n                            <Grid container spacing={3}>\n                                <Grid item sm={7}>\n                                    <TextField\n                                        label=\"Add your own custom rating\"\n                                        value={customRating}\n                                        onChange={e => {\n                                            setCustomRating(e.target.value);\n                                        }}\n                                        placeholder=\"Ex: Work Life\"\n                                        fullWidth\n                                        autoFocus\n                                    />\n                                </Grid>\n                                <Grid\n                                    item\n                                    sm={5}\n                                    style={{\n                                        display: 'flex',\n                                        justifyContent: 'flex-start',\n                                        alignItems: 'flex-end'\n                                    }}\n                                >\n                                    <Button\n                                        endIcon={<Add />}\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        size=\"small\"\n                                        disabled={!customRating.length}\n                                        onClick={() => {\n                                            dispatch({\n                                                type: ActionType.AddRatingType,\n                                                payload: {\n                                                    id: uuid(),\n                                                    data: customRating\n                                                }\n                                            });\n\n                                            setCustomRating('');\n                                        }}\n                                    >\n                                        Add\n                                    </Button>\n                                </Grid>\n                            </Grid>\n\n                            <Chips>\n                                {Object.entries(ratingTypes).map(\n                                    ([ratingID, name]) => (\n                                        <Chip\n                                            key={ratingID}\n                                            avatar={<Star color=\"secondary\" />}\n                                            label={name}\n                                            onDelete={() => {\n                                                dispatch({\n                                                    type:\n                                                        ActionType.DeleteRatingType,\n                                                    payload: {\n                                                        id: ratingID\n                                                    }\n                                                });\n                                            }}\n                                        />\n                                    )\n                                )}\n                            </Chips>\n                        </StyledFormGroup>\n                    </DialogContent>\n\n                    <DialogActions>\n                        <Button onClick={() => setActiveStep(1)}>Back</Button>\n                        <Button\n                            onClick={() => {\n                                setWizardIsOpen(false);\n                                // setActiveStep(3);\n                            }}\n                            color=\"primary\"\n                            autoFocus\n                        >\n                            Done\n                        </Button>\n                    </DialogActions>\n                </>\n            )}\n\n            {/* {isFinalStep && (\n                <>\n                    <DialogTitle>Bingo-Bango, you're set to go!</DialogTitle>\n                    <DialogContent>\n                        <StyledFormGroup>\n                            <FormLabel htmlFor=\"base\">\n                                Customize your list of rating types:\n                            </FormLabel>\n                        </StyledFormGroup>\n                    </DialogContent>\n                </>\n            )} */}\n        </Dialog>\n    );\n};\n\nexport default WizardDialog;\n","/** Formats number for contracted money display ($/K/M), with 1 decimal place */\nexport default function calculateSalary(value: number): string {\n    if (value >= 1000000) {\n        return `${format(value / 1000000)}M`;\n    } else if (value >= 1000) {\n        return `${format(value / 1000)}K`;\n    } else {\n        return `$${format(value)}`;\n    }\n}\n\n/** Limit to 1 decimal place, or 3 total digits */\nfunction format(value?: number) {\n    if (!value) return 0;\n\n    let stringValue: string = value.toFixed(1);\n\n    if (Number(stringValue[stringValue.length - 1]) === 0) {\n        value = Math.floor(value);\n    } else if (stringValue.length > 3) {\n        value = Number(value.toFixed(0));\n    } else {\n        value = Number(stringValue);\n    }\n\n    return value;\n}\n","import React, { useEffect, useReducer, useState } from 'react';\nimport { hot } from 'react-hot-loader/root';\nimport {\n    AppBar,\n    Toolbar,\n    SvgIcon,\n    Typography,\n    Container,\n    Grid,\n    Grow,\n    Slider,\n    Paper,\n    Snackbar,\n    Backdrop,\n    Fab,\n    Tooltip\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { Menu, Add } from '@material-ui/icons';\nimport { ReactComponent as CeleryIcon } from './CeleryIcon.svg';\nimport styled from 'styled-components';\n\nimport CeleryBox from './CeleryBox';\nimport reducer, { initialState } from '../store/reducer';\nimport { ActionType } from '../store/types';\nimport calculateSalary from '../utils/calculateSalary';\nimport DrawerMenu from './DrawerMenu';\nimport WizardDialog from './WizardDialog';\nimport formatMoney from '../utils/formatMoney';\nimport { fetchCurrencyRates } from '../services/fetchCurrencyRates';\n\nconst Layout = styled.div`\n    height: 100vh;\n    max-width: 100vw;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst TopNav = styled(Toolbar)`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n`;\n\nconst StyledSlider = styled(Slider)`\n    .MuiSlider-thumb {\n        transition: left 0.25s ease;\n    }\n    .MuiSlider-markLabel {\n        text-align: center;\n        max-width: 50px;\n    }\n`;\n\nconst StyledBackdrop = styled(Backdrop)`\n    z-index: ${({ theme }) => theme.zIndex.drawer - 1};\n`;\n\nconst App: React.FC = () => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const [restored, setRestored] = useState(false);\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false);\n\n    useEffect(() => {\n        fetchCurrencyRates(state.currencies.base, dispatch);\n    }, [state.currencies.base, dispatch]);\n\n    useEffect(() => {\n        const restoreLatestLocalStorage = () => {\n            // TODO: Deep-merge persistedStore into defaultState\n            const persistedStore = JSON.parse(\n                window.localStorage.getItem('persistedStore') || '{}'\n            );\n\n            // Override the store with persisted one if it's newer\n            if (persistedStore && persistedStore.timestamp > state.timestamp) {\n                setRestored(true);\n\n                // TODO: Migrate the persisted store if schema has changed?\n                dispatch({\n                    type: ActionType.SetStore,\n                    payload: { data: persistedStore }\n                });\n            }\n        };\n\n        window.addEventListener('focus', restoreLatestLocalStorage);\n\n        return () =>\n            window.removeEventListener('focus', restoreLatestLocalStorage);\n    }, [state.timestamp, dispatch]);\n\n    // TODO: Move to selector\n    const salaries = Object.values(state.celeries)\n        .map(\n            ({\n                input: { value, type, currency },\n                commitment: {\n                    fullTime,\n                    hoursInDay,\n                    daysInWeek,\n                    vacationDays,\n                    holidayDays\n                }\n            }) => {\n                const defaultValues =\n                    state.defaults[fullTime ? 'fullTime' : 'partTime'];\n\n                return calculateSalary({\n                    value,\n                    valueType: type,\n                    fullTime,\n                    hoursInDay: hoursInDay || defaultValues.hoursInDay,\n                    daysInWeek: daysInWeek || defaultValues.daysInWeek,\n                    vacationDays: vacationDays || defaultValues.vacationDays,\n                    holidayDays: holidayDays || defaultValues.holidayDays,\n                    ...(state.currencies.rates\n                        ? {\n                              factor: (state.currencies.rates[\n                                  currency || state.currencies.base\n                              ] as unknown) as number\n                          }\n                        : {})\n                });\n            }\n        )\n        .filter(value => value > 0);\n\n    return (\n        <Layout>\n            <AppBar position=\"static\">\n                <TopNav>\n                    <Menu onClick={() => setDrawerIsOpen(!drawerIsOpen)} />\n                    <Typography\n                        variant=\"h6\"\n                        component=\"h1\"\n                        style={{\n                            fontWeight: 'bold'\n                        }}\n                    >\n                        Celery\n                        <SvgIcon\n                            viewBox=\"0 0 512 512\"\n                            style={{ marginLeft: 10, verticalAlign: 'sub' }}\n                        >\n                            <CeleryIcon />\n                        </SvgIcon>\n                    </Typography>\n                </TopNav>\n            </AppBar>\n\n            <StyledBackdrop\n                open={drawerIsOpen}\n                onClick={() => setDrawerIsOpen(false)}\n            />\n            <DrawerMenu\n                dispatch={dispatch}\n                isOpen={drawerIsOpen}\n                setIsOpen={setDrawerIsOpen}\n                currencies={state.currencies}\n                min={state.min}\n                desired={state.desired}\n                ratingTypes={state.ratingTypes}\n            />\n\n            <Container\n                style={{\n                    height: 'calc(100vh - 64px)',\n                    maxHeight: 'calc(100vh - 64px)',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    padding: '3em 0 1em'\n                }}\n            >\n                <Grid\n                    container\n                    direction=\"column\"\n                    spacing={2}\n                    style={{ flex: 1 }}\n                >\n                    {Object.entries(state.celeries).map(\n                        ([id, celery], index) => (\n                            <Grid item key={id}>\n                                <Grow in>\n                                    <Paper>\n                                        <CeleryBox\n                                            key={id}\n                                            index={index}\n                                            id={id}\n                                            dispatch={dispatch}\n                                            // TODO: Refactor\n                                            {...(state.currencies.rates\n                                                ? {\n                                                      rateFactor: (state\n                                                          .currencies.rates[\n                                                          celery.input\n                                                              .currency ||\n                                                              state.currencies\n                                                                  .base\n                                                      ] as unknown) as number\n                                                  }\n                                                : {})}\n                                            baseCurrency={state.currencies.base}\n                                            defaults={state.defaults}\n                                            ratingTypes={state.ratingTypes}\n                                            {...celery}\n                                        />\n                                    </Paper>\n                                </Grow>\n                            </Grid>\n                        )\n                    )}\n                </Grid>\n\n                <Grid item>\n                    <Grid container spacing={2} style={{ marginTop: '3em' }}>\n                        <Grid item>\n                            <Typography variant=\"h6\" color=\"textSecondary\">\n                                &nbsp;$&nbsp;\n                            </Typography>\n                        </Grid>\n\n                        <Grid item style={{ flex: 1 }}>\n                            <StyledSlider\n                                color=\"secondary\"\n                                track={false}\n                                min={Math.min(state.min, ...salaries)}\n                                max={Math.max(state.desired, ...salaries)}\n                                value={salaries}\n                                valueLabelFormat={formatMoney}\n                                marks={[\n                                    {\n                                        label: `Min. (${formatMoney(\n                                            state.min\n                                        )})`,\n                                        value: state.min\n                                    },\n                                    {\n                                        label: `Des. (${formatMoney(\n                                            state.desired\n                                        )})`,\n                                        value: state.desired\n                                    }\n                                ]}\n                                valueLabelDisplay=\"on\"\n                            />\n                        </Grid>\n\n                        <Grid item style={{ position: 'relative' }}>\n                            <Tooltip title=\"Add Company\" placement=\"top\">\n                                <Fab\n                                    size=\"large\"\n                                    color=\"primary\"\n                                    onClick={() =>\n                                        dispatch({ type: ActionType.AddCelery })\n                                    }\n                                    style={{\n                                        position: 'absolute',\n                                        top: -75,\n                                        right: 55\n                                    }}\n                                >\n                                    <Add />\n                                </Fab>\n                            </Tooltip>\n\n                            <Typography variant=\"h6\" color=\"textSecondary\">\n                                $$$\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Container>\n\n            <Snackbar\n                open={restored}\n                autoHideDuration={4000}\n                onClose={() => setRestored(false)}\n            >\n                <Alert variant=\"filled\" severity=\"success\">\n                    Restored from your Local Storage!\n                </Alert>\n            </Snackbar>\n\n            <WizardDialog {...state} dispatch={dispatch} />\n        </Layout>\n    );\n};\n\nexport default process.env.NODE_ENV === 'development' ? hot(App) : App;\n","import { Dispatch, ActionType } from '../store/types';\nimport { CurrencyType } from './types';\nimport querystring from 'querystring';\n\nconst API_URI = 'https://api.exchangeratesapi.io/latest';\n\nexport async function fetchCurrencyRates(\n    base: CurrencyType,\n    dispatch: Dispatch\n) {\n    try {\n        const request = await fetch(\n            `${API_URI}?${querystring.stringify({ base })}`\n        );\n        const data = await request.json();\n\n        dispatch({\n            type: ActionType.SetCurrencies,\n            payload: { data }\n        });\n    } catch (err) {\n        // dispatch error\n        console.error(err);\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    palette: {\n        common: { black: 'rgba(0, 0, 0, 1)', white: '#fff' },\n        background: {\n            paper: 'rgba(255, 255, 255, 1)',\n            default: 'rgba(239, 239, 239, 1)'\n        },\n        primary: {\n            light: 'rgba(175, 238, 107, 1)',\n            main: 'rgba(97, 186, 0, 1)',\n            dark: 'rgba(65, 117, 5, 1)',\n            contrastText: '#fff'\n        },\n        secondary: {\n            light: 'rgba(175, 238, 107, 1)',\n            main: 'rgba(97, 186, 0, 1)',\n            dark: 'rgba(65, 117, 5, 1)',\n            contrastText: '#fff'\n        },\n        error: {\n            light: '#e57373',\n            main: '#f44336',\n            dark: '#d32f2f',\n            contrastText: '#fff'\n        },\n        text: {\n            primary: 'rgba(59, 59, 59, 0.87)',\n            secondary: 'rgba(73, 73, 73, 0.6)',\n            disabled: 'rgba(0, 0, 0, 0.38)',\n            hint: 'rgba(0, 0, 0, 0.38)'\n        }\n    }\n});\n\nexport type ThemeType = typeof theme;\n\nexport default responsiveFontSizes(theme);\n","import { createGlobalStyle } from 'styled-components';\nimport { ThemeType } from './theme';\n\n// Style overrides\nconst GlobalStyle = createGlobalStyle<{ theme: ThemeType }>`\n    .MuiInputBase-root {\n        :before {\n            border-bottom: 1px dashed ${p => {\n                return p.theme.palette.text.primary;\n            }};\n            opacity: 0.5;\n        }\n    }\n`;\n\nexport default GlobalStyle;\n","// TODO: Convert to .ts\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/core/styles';\nimport { ThemeProvider } from 'styled-components';\nimport theme from './theme';\nimport GlobalStyle from './GlobalStyle';\n\nReactDOM.render(\n    <MuiThemeProvider theme={theme}>\n        <ThemeProvider theme={theme}>\n            <>\n                <CssBaseline />\n                <GlobalStyle />\n            </>\n            <App />\n        </ThemeProvider>\n    </MuiThemeProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}